<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="GetFunctionalStatus" resourceRoot="" soapui-version="5.0.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="GetFunctionalStatusResponderBinding" type="wsdl" bindingName="{urn:riv:clinicalprocess:healthcond:description:GetFunctionalStatus:2:rivtabp21}GetFunctionalStatusResponderBinding" soapVersion="1_1" anonymous="optional" definition="file:../../schemas/interactions/GetFunctionalStatusInteraction/GetFunctionalStatusInteraction_2.0_RIVTABP21.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/Users/khaled/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/description/trunk/schemas/interactions/GetFunctionalStatusInteraction/GetFunctionalStatusInteraction_2.0_RIVTABP21.wsdl"><con:part><con:url>file:/Users/khaled/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/description/trunk/schemas/interactions/GetFunctionalStatusInteraction/GetFunctionalStatusInteraction_2.0_RIVTABP21.wsdl</con:url><con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<wsdl:definitions name="GetFunctionalStatusInteraction" targetNamespace="urn:riv:clinicalprocess:healthcond:description:GetFunctionalStatus:2:rivtabp21" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tjsr="urn:riv:clinicalprocess:healthcond:description:GetFunctionalStatusResponder:2" xmlns:tjsi="urn:riv:clinicalprocess:healthcond:description:GetFunctionalStatusInitiator:2" xmlns:tns="urn:riv:clinicalprocess:healthcond:description:GetFunctionalStatus:2:rivtabp21" xmlns:itr="urn:riv:itintegration:registry:1">
  <xs:annotation>
    <xs:documentation>Tjänsteinteraktionens namn: GetFunctionalStatusInteraction
			 Beskrivning: 
			   
			 Revisioner: 
			 Tjänstedomän: clinicalprocess:healthcond:description
			 Tjänsteinteraktionstyp: Fråga-Svar
			 WS-profil: RIVTABP21
			 Förvaltas av: Sveriges Kommuner och Landsting</xs:documentation>
  </xs:annotation>
  <wsdl:types>
    <xs:schema targetNamespace="urn:riv:clinicalprocess:healthcond:description:GetFunctionalStatus:2:rivtabp21">
      <xs:import schemaLocation="GetFunctionalStatusResponder_2.0.xsd" namespace="urn:riv:clinicalprocess:healthcond:description:GetFunctionalStatusResponder:2"/>
      <xs:import schemaLocation="../../core_components/itintegration_registry_1.0.xsd" namespace="urn:riv:itintegration:registry:1"/>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="GetFunctionalStatusRequest">
    <wsdl:part name="LogicalAddress" element="itr:LogicalAddress">
      <wsdl:documentation/>
    </wsdl:part>
    <wsdl:part name="parameters" element="tjsr:GetFunctionalStatus"/>
  </wsdl:message>
  <wsdl:message name="GetFunctionalStatusResponse">
    <wsdl:part name="parameters" element="tjsr:GetFunctionalStatusResponse"/>
  </wsdl:message>
  <wsdl:portType name="GetFunctionalStatusResponderInterface">
    <wsdl:operation name="GetFunctionalStatus">
      <wsdl:input message="tns:GetFunctionalStatusRequest"/>
      <wsdl:output message="tns:GetFunctionalStatusResponse"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="GetFunctionalStatusResponderBinding" type="tns:GetFunctionalStatusResponderInterface">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="GetFunctionalStatus">
      <soap:operation soapAction="urn:riv:clinicalprocess:healthcond:description:GetFunctionalStatusResponder:2:GetFunctionalStatus" style="document"/>
      <wsdl:input>
        <soap:header use="literal" message="tns:GetFunctionalStatusRequest" part="LogicalAddress"/>
        <soap:body use="literal" parts="parameters"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="GetFunctionalStatusResponderService">
    <wsdl:port name="GetFunctionalStatusResponderPort" binding="tns:GetFunctionalStatusResponderBinding">
      <soap:address location="http://tempuri.org"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>file:/Users/khaled/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/description/trunk/schemas/interactions/GetFunctionalStatusInteraction/GetFunctionalStatusResponder_2.0.xsd</con:url><con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<xs:schema targetNamespace="urn:riv:clinicalprocess:healthcond:description:GetFunctionalStatusResponder:2" elementFormDefault="qualified" attributeFormDefault="unqualified" version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn:riv:clinicalprocess:healthcond:description:GetFunctionalStatusResponder:2" xmlns:core="urn:riv:clinicalprocess:healthcond:description:2">
  <xs:import schemaLocation="../../core_components/clinicalprocess_healthcond_description_2.1.xsd" namespace="urn:riv:clinicalprocess:healthcond:description:2"/>
  <xs:element name="GetFunctionalStatus" type="tns:GetFunctionalStatusType"/>
  <xs:element name="GetFunctionalStatusResponse" type="tns:GetFunctionalStatusResponseType"/>
  <xs:complexType name="GetFunctionalStatusType">
    <xs:sequence>
      <xs:element name="careUnitHSAId" type="core:HSAIdType" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="patientId" type="core:PersonIdType"/>
      <xs:element name="datePeriod" type="core:DatePeriodType" minOccurs="0"/>
      <xs:element name="sourceSystemHSAId" type="core:HSAIdType" minOccurs="0"/>
      <xs:element name="careContactId" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="GetFunctionalStatusResponseType">
    <xs:sequence>
      <xs:element name="functionalStatusAssessment" type="core:FunctionalStatusAssessmentType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="result" type="core:ResultType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/khaled/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/description/trunk/schemas/core_components/clinicalprocess_healthcond_description_2.1.xsd</con:url><con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<xs:schema targetNamespace="urn:riv:clinicalprocess:healthcond:description:2" elementFormDefault="qualified" attributeFormDefault="unqualified" version="2.1" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn:riv:clinicalprocess:healthcond:description:2" xmlns:codes="urn:riv:clinicalprocess:healthcond:description:enums:2">
  <xs:import schemaLocation="./clinicalprocess_healthcond_description_enum_2.1.xsd" namespace="urn:riv:clinicalprocess:healthcond:description:enums:2"/>
  <xs:complexType name="CareDocumentationType">
    <xs:sequence>
      <xs:element name="careDocumentationHeader" type="tns:CPatientSummaryHeaderType"/>
      <xs:element name="careDocumentationBody" type="tns:CareDocumentationBodyType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CareDocumentationBodyType">
    <xs:sequence>
      <xs:element name="clinicalDocumentNote" type="tns:ClinicalDocumentNoteType"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="FunctionalStatusAssessmentType">
    <xs:sequence>
      <xs:element name="functionalStatusAssessmentHeader" type="tns:PatientSummaryHeaderType"/>
      <xs:element name="functionalStatusAssessmentBody" type="tns:FunctionalStatusAssessmentBodyType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="FunctionalStatusAssessmentBodyType">
    <xs:sequence>
      <xs:element name="assessmentCategory" type="codes:AssessmentCategoryEnum"/>
      <xs:element minOccurs="0" name="comment" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="padl" type="tns:PADLType"/>
      <xs:element maxOccurs="1" minOccurs="0" name="disability" type="tns:DisabilityType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RelationType">
    <xs:sequence>
      <xs:element name="code" type="tns:CVType" minOccurs="1"/>
      <xs:element name="referredInformation" type="tns:ReferredInformationType" minOccurs="1" maxOccurs="1"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ReferredInformationType">
    <xs:sequence>
      <xs:element name="id" type="tns:IIType" minOccurs="1"/>
      <xs:element name="time" type="tns:TimeStampType"/>
      <xs:element name="type" type="xs:string" minOccurs="1"/>
      <xs:element name="informationOwner" type="tns:InformationOwnerType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="InformationOwnerType">
    <xs:sequence>
      <xs:element name="id" type="tns:IIType" minOccurs="1"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <!--@TODO better names for clinicalDocumentNoteCode-->
  <xs:complexType name="ClinicalDocumentNoteType">
    <xs:sequence>
      <xs:element name="clinicalDocumentNoteCode" type="codes:ClinicalDocumentNoteCodeEnum" minOccurs="0" maxOccurs="1"/>
      <xs:element name="clinicalDocumentTypeCode" type="codes:ClinicalDocumentTypeCodeEnum" minOccurs="0" maxOccurs="1"/>
      <xs:element name="clinicalDocumentNoteTitle" type="xs:string" minOccurs="0"/>
      <xs:element name="clinicalDocumentNoteText" type="xs:string" maxOccurs="1" minOccurs="0"/>
      <xs:element name="multimediaEntry" type="tns:MultimediaType" minOccurs="0" maxOccurs="1"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="dissentintOpinion" type="tns:DissentingOpinionType"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PatientSummaryHeaderType">
    <xs:sequence>
      <xs:element name="documentId" type="xs:string"/>
      <xs:element name="sourceSystemHSAId" type="tns:HSAIdType"/>
      <xs:element name="documentTitle" type="xs:string" minOccurs="0"/>
      <xs:element name="documentTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="patientId" type="tns:PersonIdType"/>
      <xs:element name="accountableHealthcareProfessional" type="tns:HealthcareProfessionalType"/>
      <xs:element name="legalAuthenticator" type="tns:LegalAuthenticatorType" minOccurs="0"/>
      <xs:element name="approvedForPatient" type="xs:boolean"/>
      <xs:element name="careContactId" type="xs:string" minOccurs="0"/>
      <xs:element minOccurs="0" name="nullified" type="xs:boolean"/>
      <xs:element minOccurs="0" name="nullifiedReason" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <!--Only used here to keep backwards compatibility with GetCareDocumentation 2.0, must be removed in favour
        of PatientSummaryHeaderType above when we go for the next major version-->
  <xs:complexType name="CPatientSummaryHeaderType">
    <xs:sequence>
      <xs:element name="documentId" type="xs:string"/>
      <xs:element name="sourceSystemHSAid" type="tns:HSAIdType"/>
      <xs:element name="documentTitle" type="xs:string" minOccurs="0"/>
      <xs:element name="documentTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="patientId" type="tns:PersonIdType"/>
      <xs:element name="accountableHealthcareProfessional" type="tns:HealthcareProfessionalType"/>
      <xs:element name="legalAuthenticator" type="tns:LegalAuthenticatorType" minOccurs="0"/>
      <xs:element name="approvedForPatient" type="xs:boolean"/>
      <xs:element name="careContactId" type="xs:string" minOccurs="0"/>
      <xs:element minOccurs="0" name="nullified" type="xs:boolean"/>
      <xs:element minOccurs="0" name="nullifiedReason" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="HealthcareProfessionalType">
    <xs:sequence>
      <xs:element name="authorTime" type="tns:TimeStampType"/>
      <xs:element name="healthcareProfessionalHSAId" type="tns:HSAIdType" minOccurs="0"/>
      <xs:element name="healthcareProfessionalName" type="xs:string" minOccurs="0"/>
      <xs:element name="healthcareProfessionalRoleCode" type="tns:CVType" minOccurs="0"/>
      <xs:element name="healthcareProfessionalOrgUnit" type="tns:OrgUnitType" minOccurs="0"/>
      <xs:element name="healthcareProfessionalCareUnitHSAId" type="tns:HSAIdType" minOccurs="0"/>
      <xs:element minOccurs="0" name="healthcareProfessionalCareGiverHSAId" type="tns:HSAIdType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OrgUnitType">
    <xs:sequence>
      <xs:element name="orgUnitHSAId" type="tns:HSAIdType" minOccurs="1"/>
      <xs:element name="orgUnitName" type="xs:string" minOccurs="1"/>
      <xs:element name="orgUnitTelecom" type="xs:string" minOccurs="0"/>
      <xs:element name="orgUnitEmail" type="xs:string" minOccurs="0"/>
      <xs:element name="orgUnitAddress" type="xs:string" minOccurs="0"/>
      <xs:element name="orgUnitLocation" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DiagnosisType">
    <xs:sequence>
      <xs:element name="diagnosisHeader" type="tns:PatientSummaryHeaderType"/>
      <xs:element name="diagnosisBody" type="tns:DiagnosisBodyType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DiagnosisBodyType">
    <xs:sequence>
      <xs:element name="typeOfDiagnosis" type="codes:DiagnosisTypeEnum"/>
      <xs:element minOccurs="0" name="chronicDiagnosis" type="xs:boolean"/>
      <xs:element name="diagnosisTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="diagnosisCode" type="tns:CVType" minOccurs="0"/>
      <xs:element name="relatedDiagnosis" type="tns:RelatedDiagnosisType" maxOccurs="unbounded" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AlertInformationType">
    <xs:sequence>
      <xs:element name="alertInformationHeader" type="tns:PatientSummaryHeaderType"/>
      <xs:element name="alertInformationBody" type="tns:AlertInformationBodyType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RelatedDiagnosisType">
    <xs:sequence>
      <xs:element name="documentId" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AlertInformationBodyType">
    <xs:sequence>
      <xs:element name="typeOfAlertInformation" type="tns:CVType"/>
      <xs:element name="ascertainedDate" type="tns:DateType" minOccurs="0"/>
      <xs:element name="verifiedTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="validityTimePeriod" type="tns:TimePeriodType"/>
      <xs:element name="alertInformationComment" type="xs:string" minOccurs="0"/>
      <xs:element name="obsoleteTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="obsoleteComment" type="xs:string" minOccurs="0"/>
      <xs:element name="hypersensitivity" type="tns:HyperSensitivityType" minOccurs="0"/>
      <xs:element name="seriousDisease" type="tns:SeriousDiseaseType" minOccurs="0"/>
      <xs:element name="treatment" type="tns:TreatmentType" minOccurs="0"/>
      <xs:element name="communicableDisease" type="tns:CommunicableDiseaseType" minOccurs="0"/>
      <xs:element name="restrictionOfCare" minOccurs="0" type="tns:RestrictionOfCareType"/>
      <xs:element name="unstructuredAlertInformation" minOccurs="0" type="tns:UnstructuredAlertInformationType"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="relatedAlertInformation" type="tns:RelatedAlertInformationType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="HyperSensitivityType">
    <xs:sequence>
      <xs:element name="typeOfHypersensitivity" type="tns:CVType" minOccurs="0"/>
      <xs:element name="degreeOfSeverity" type="tns:CVType" minOccurs="0"/>
      <xs:element name="degreeOfCertainty" type="tns:CVType" minOccurs="0"/>
      <xs:element name="pharmaceuticalHypersensitivity" type="tns:PharmaceuticalHypersensitivityType" minOccurs="0"/>
      <xs:element name="otherHypersensitivity" type="tns:OtherHypersensitivityType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PharmaceuticalHypersensitivityType">
    <xs:sequence>
      <xs:element name="atcSubstance" type="tns:CVType" minOccurs="0"/>
      <xs:element name="nonATCSubstance" type="xs:string" minOccurs="0"/>
      <xs:element name="nonATCSubstanceComment" type="xs:string" minOccurs="0"/>
      <xs:element name="pharmaceuticalProductId" type="tns:CVType" maxOccurs="unbounded" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OtherHypersensitivityType">
    <xs:sequence>
      <xs:element name="hypersensitivityAgent" type="xs:string" minOccurs="0"/>
      <xs:element name="hypersensitivityAgentCode" type="tns:CVType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SeriousDiseaseType">
    <xs:sequence>
      <xs:element name="disease" type="tns:CVType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="TreatmentType">
    <xs:sequence>
      <xs:element name="treatmentDescription" type="xs:string"/>
      <xs:element name="treatmentCode" type="tns:CVType" minOccurs="0"/>
      <xs:element name="pharmaceuticalTreatment" type="tns:CVType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CommunicableDiseaseType">
    <xs:sequence>
      <xs:element name="communicableDiseaseCode" type="tns:CVType"/>
      <xs:element name="routeOfTransmission" type="tns:CVType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RestrictionOfCareType">
    <xs:sequence>
      <xs:element name="restrictionOfCareComment" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="UnstructuredAlertInformationType">
    <xs:sequence>
      <xs:element name="unstructuredAlertInformationHeading" type="xs:string"/>
      <xs:element name="unstructuredAlertInformationContent" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RelatedAlertInformationType">
    <xs:sequence>
      <xs:element name="typeOfAlertInformationRelationship" type="tns:CVType"/>
      <xs:element name="relationComment" type="xs:string" minOccurs="0"/>
      <xs:element name="documentId" type="xs:string" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PADLType">
    <xs:sequence>
      <xs:element name="typeOfAssessment" type="tns:CVType"/>
      <xs:element name="assessment" type="xs:string" minOccurs="1"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DisabilityType">
    <xs:sequence>
      <xs:element name="disabilityAssessment" type="tns:CVType"/>
      <xs:element name="comment" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <!--Below: only helper types allowed.
        
        A helper type is a type used in one ore more of the domain schema common types.
        It can also be a type used in two or more service schemas.-->
  <xs:complexType name="DatePeriodType">
    <xs:annotation>
      <xs:documentation>Används för att specificera ett datumintervall med hjälp av start-
                och slutdatum. start: Startdatum på formatet ÅÅÅÅMMDD end: Slutdatum på formatet
                ÅÅÅÅMMDD</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="start" type="tns:DateType"/>
      <xs:element name="end" type="tns:DateType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <!--YYYYMMDD-->
  <xs:simpleType name="DateType">
    <xs:restriction base="xs:string">
      <xs:pattern value="(19|20)\d\d(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])"/>
    </xs:restriction>
  </xs:simpleType>
  <!--@TODO Should we have maxlength 64?-->
  <xs:simpleType name="HSAIdType">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:complexType name="MultimediaType">
    <xs:sequence>
      <xs:element name="mediaType" type="codes:MediaTypeEnum"/>
      <xs:element name="value" type="xs:base64Binary" minOccurs="0"/>
      <xs:element name="reference" type="xs:anyURI" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="TimePeriodType">
    <xs:annotation>
      <xs:documentation>Används för att specificera ett datumintervall med hjälp av start-
                och slutdatum. start: Startdatum på formatet YYYYMMDDhhmmss end: Slutdatum på
                formatet YYYYMMDDhhmmss</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="start" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="end" type="tns:TimeStampType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="TimeStampType">
    <xs:annotation>
      <xs:documentation>A quantity specifying a point on the axis of natural time. A point in
                time is most often represented as a calendar expression. The time has the format
                YYYYMMDDhhmmss</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="(19|20)\d\d(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|1[0-9]|2[0123])([0-5])([0-9])([0-5])([0-9])"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="CVType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="xs:string" minOccurs="0"/>
      <xs:element name="codeSystem" type="xs:string" minOccurs="0"/>
      <xs:element name="codeSystemName" type="xs:string" minOccurs="0"/>
      <xs:element name="codeSystemVersion" type="xs:string" minOccurs="0"/>
      <xs:element name="displayName" type="xs:string" minOccurs="0"/>
      <xs:element name="originalText" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="LegalAuthenticatorType">
    <xs:sequence>
      <xs:element name="signatureTime" type="tns:TimeStampType"/>
      <xs:element name="legalAuthenticatorHSAId" type="tns:HSAIdType" minOccurs="0"/>
      <xs:element name="legalAuthenticatorName" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DissentingOpinionType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="opinionId" type="tns:IIType" minOccurs="0"/>
      <xs:element name="authorTime" type="tns:TimeStampType" minOccurs="1"/>
      <xs:element name="opinion" type="xs:string"/>
      <xs:element name="personId" type="tns:PersonIdType"/>
      <xs:element name="personName" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PQType">
    <xs:sequence>
      <xs:element name="value" type="xs:double"/>
      <xs:element name="unit" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="IIType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="root" type="xs:string"/>
      <xs:element name="extension" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PersonIdType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:string"/>
      <xs:element name="type" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="communicableDisease" type="tns:CommunicableDiseaseType"/>
  <xs:complexType name="ResultType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="resultCode" type="codes:ResultCodeEnum"/>
      <xs:element name="errorCode" type="codes:ErrorCodeEnum" minOccurs="0"/>
      <xs:element name="logId" type="xs:string"/>
      <xs:element minOccurs="0" name="subCode" type="xs:string"/>
      <xs:element name="message" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/khaled/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/description/trunk/schemas/core_components/clinicalprocess_healthcond_description_enum_2.1.xsd</con:url><con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at
 
 http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<xs:schema targetNamespace="urn:riv:clinicalprocess:healthcond:description:enums:2" elementFormDefault="qualified" attributeFormDefault="unqualified" version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn:riv:clinicalprocess:healthcond:description:enums:2">
  <xs:simpleType name="ClinicalDocumentNoteCodeEnum">
    <xs:annotation>
      <xs:documentation>Kod för typ av anteckning.
                Tillåtna värden från kodverk Anteckningstyp (1.2.752.129.2.2.2.11):</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="utr">
        <xs:annotation>
          <xs:documentation>Utredning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="atb">
        <xs:annotation>
          <xs:documentation>Åtgärd/Behandling</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="sam">
        <xs:annotation>
          <xs:documentation>Sammanfattning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="sao">
        <xs:annotation>
          <xs:documentation>Samordning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ins">
        <xs:annotation>
          <xs:documentation>Inskrivning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="slu">
        <xs:annotation>
          <xs:documentation>Slutanteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="auf">
        <xs:annotation>
          <xs:documentation>Anteckning utan fysiskt möte</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="sva">
        <xs:annotation>
          <xs:documentation>Slutenvårdsanteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="bes">
        <xs:annotation>
          <xs:documentation>Besöksanteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="MediaTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="application/dicom"/>
      <xs:enumeration value="application/msword"/>
      <xs:enumeration value="application/pdf"/>
      <xs:enumeration value="audio/basic"/>
      <xs:enumeration value="audio/k32adpcm"/>
      <xs:enumeration value="audio/mpeg"/>
      <xs:enumeration value="image/g3fax"/>
      <xs:enumeration value="image/gif"/>
      <xs:enumeration value="image/jpeg"/>
      <xs:enumeration value="image/png"/>
      <xs:enumeration value="image/tiff"/>
      <xs:enumeration value="model/vrml"/>
      <xs:enumeration value="multipart/x-hl7-cda-level1"/>
      <xs:enumeration value="text/html"/>
      <xs:enumeration value="text/plain"/>
      <xs:enumeration value="text/rtf"/>
      <xs:enumeration value="text/sgml"/>
      <xs:enumeration value="text/x-hl7-ft"/>
      <xs:enumeration value="text/xml"/>
      <xs:enumeration value="video/mpeg"/>
      <xs:enumeration value="video/x-avi"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ClinicalDocumentTypeCodeEnum">
    <xs:annotation>
      <xs:documentation>Kod för typ av anteckning.
                Tillåtna värden från kodverk (?.?.?.?.?.?):</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="epi">
        <xs:annotation>
          <xs:documentation>Epikris</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="int">
        <xs:annotation>
          <xs:documentation>Intagninganteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="dag">
        <xs:annotation>
          <xs:documentation>Daganteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ova">
        <xs:annotation>
          <xs:documentation>Öppenvårdsanteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ovs">
        <xs:annotation>
          <xs:documentation>Öppenvårdssammanfattning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ovr">
        <xs:annotation>
          <xs:documentation>Övrigt dokument</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="AssessmentCategoryEnum">
    <xs:annotation>
      <xs:documentation>Bedömningskategori.
                Beskriver vilken kategori av bedömning som är gjord. Tillåtna värden är "pad-pad" (för PADL-bedömning) och "fun-fun" (för funktionsnedsättningsbedömningar).</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="pad-pad">
        <xs:annotation>
          <xs:documentation>PADL-bedömning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="fun-fun">
        <xs:annotation>
          <xs:documentation>funktionsnedsättningsbedömningar</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DiagnosisTypeEnum">
    <xs:annotation>
      <xs:documentation>Anges som "Huvuddiagnos", "Bidiagnos".</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="Huvuddiagnos">
        <xs:annotation>
          <xs:documentation>Huvuddiagnos</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Bidiagnos">
        <xs:annotation>
          <xs:documentation>Bidiagnos</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ResultCodeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="OK"/>
      <xs:enumeration value="ERROR"/>
      <xs:enumeration value="INFO"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ErrorCodeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="INVALID_REQUEST"/>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/khaled/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/description/trunk/schemas/core_components/itintegration_registry_1.0.xsd</con:url><con:content><![CDATA[<xs:schema targetNamespace="urn:riv:itintegration:registry:1" elementFormDefault="qualified" version="1.0" xmlns="urn:riv:itintegration:registry:1" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:annotation>
    <xs:documentation>Beskrivning: 	Grundläggande informationsobjekt för domänen itintegration:registry (adressering av tjänster)
			
			Revisionshistorik: 2011-06-27 Mats Ekhammar, Callista Enterprise AB
				Added ServiceContractType
			
			Datum:			2011-05-04
			Beskrivning:	Initial version
			Författare:		marcus.krantz@callistaenterprise.se</xs:documentation>
  </xs:annotation>
  <xs:element name="LogicalAddress" type="LogicalAddressType"/>
  <xs:element name="ServiceContract" type="ServiceContractType"/>
  <xs:simpleType name="LogicalAddressType">
    <xs:annotation>
      <xs:documentation>Defines the type for logical address according to national reference architecture.
				Superseeds wsa:To as type for logical address header in RIVTA 2.1.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:complexType name="ServiceContractType">
    <xs:annotation>
      <xs:documentation>Type which describes a service contract. Used in interaction GetSupportedServiceContracts.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="ServiceContractNamespace" type="xs:anyURI"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://tempuri.org</con:endpoint></con:endpoints><con:operation isOneWay="false" action="urn:riv:clinicalprocess:healthcond:description:GetFunctionalStatusResponder:2:GetFunctionalStatus" name="GetFunctionalStatus" bindingOperationName="GetFunctionalStatus" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional" type="Request-Response"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://tempuri.org</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetFunctionalStatusResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>?</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetFunctionalStatus>
         <!--Zero or more repetitions:-->
         <urn1:careUnitHSAId>?</urn1:careUnitHSAId>
         <urn1:patientId>
            <urn2:id>?</urn2:id>
            <urn2:type>?</urn2:type>
            <!--You may enter ANY elements at this point-->
         </urn1:patientId>
         <!--Optional:-->
         <urn1:datePeriod>
            <urn2:start>?</urn2:start>
            <urn2:end>?</urn2:end>
            <!--You may enter ANY elements at this point-->
         </urn1:datePeriod>
         <!--Optional:-->
         <urn1:sourceSystemHSAId>?</urn1:sourceSystemHSAId>
         <!--Zero or more repetitions:-->
         <urn1:careContactId>?</urn1:careContactId>
         <!--You may enter ANY elements at this point-->
      </urn1:GetFunctionalStatus>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:riv:clinicalprocess:healthcond.description:GetFunctionalStatusResponder:2:GetFunctionalStatus"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:testSuite name="TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Basic Testcase" searchProperties="true" id="88ea8df3-f5fa-46ac-844e-248c6f5145d5"><con:settings/><con:testStep type="groovy" name="GIVEN Basic Testcase data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("Basic Testcase")</script></con:config></con:testStep><con:testStep type="request" name="WHEN calling GetFunctionalStatus with patientId"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetFunctionalStatusResponderBinding</con:interface><con:operation>GetFunctionalStatus</con:operation><con:request name="WHEN calling GetFunctionalStatus with patientId"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="BasicResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetFunctionalStatusResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetFunctionalStatus>
        <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetFunctionalStatus>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration><definition/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="THEN ensure all schematron rules passes"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
    new File(utils.projectPath + File.separator + "constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AND ensure patientId is correct"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper

def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
// Fetch properties from TestSuite Custom properties
holder.namespaces['urn'] = context.expand('${#TestSuite#urn}')
holder.namespaces['urn1'] = context.expand('${#TestSuite#urn1}')

def records = holder.getDomNodes(context.expand('${#TestSuite#headerNode}'))
assert records.length > 0 :"Response contains no records."

// Compare patientId and patientIdType in the response to what we have in data.xml for this test case.
records.each {c ->
    def recordHolder = new XmlHolder( c )
    holder.namespaces.each {key, value -> recordHolder.namespaces[key] = value}
    def documentId = recordHolder.getNodeValue('//urn1:documentId')
    def patientId = recordHolder.getNodeValue('//urn1:patientId/urn1:id')
    def patientIdType = recordHolder.getNodeValue('//urn1:patientId/urn1:type')
    assert (patientId != context.patientId || patientIdType != context.patientIdType) != true : "Response contains a record with other PatientId. PatientId: ${patientId}, Type: ${patientIdType} DocumentId: ${documentId}"
}</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure result.resultCode equals OK"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
//urn:GetFunctionalStatusResponse[1]/urn:result[1]/urn1:resultCode[1]/text() = "OK"</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>true</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure a result.logId is returned"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
//urn:GetFunctionalStatusResponse[1]/urn:result[1]/urn1:logId[matches(., '.*')]</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="urn:riv:clinicalprocess:healthcond.description:GetFunctionalStatusResponder:2:GetFunctionalStatus" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Date Boundaries" searchProperties="true" id="7fc241ba-a2fb-412a-a9cf-50ad94a7dff0"><con:settings/><con:testStep type="groovy" name="GIVEN Date Boundaries data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("Date Boundaries")</script></con:config></con:testStep><con:testStep type="request" name="WHEN calling GetFunctionalStatus with patientId and timePeriod"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetFunctionalStatusResponderBinding</con:interface><con:operation>GetFunctionalStatus</con:operation><con:request name="WHEN calling GetFunctionalStatus with patientId and timePeriod"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="DateResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetFunctionalStatusResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetFunctionalStatus>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:datePeriod>
            <urn2:start>${timePeriodStart}</urn2:start>
            <urn2:end>${timePeriodEnd}</urn2:end>
         </urn1:datePeriod>
      </urn1:GetFunctionalStatus>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration><definition/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="THEN ensure all schematron rules passes"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
    new File(utils.projectPath + File.separator + "constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AND ensure patientId is correct"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper

def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
// Fetch properties from TestSuite Custom properties
holder.namespaces['urn'] = context.expand('${#TestSuite#urn}')
holder.namespaces['urn1'] = context.expand('${#TestSuite#urn1}')

def records = holder.getDomNodes(context.expand('${#TestSuite#headerNode}'))
assert records.length > 0 :"Response contains no records."

// Compare patientId and patientIdType in the response to what we have in data.xml for this test case.
records.each {c ->
    def recordHolder = new XmlHolder( c )
    holder.namespaces.each {key, value -> recordHolder.namespaces[key] = value}
    def documentId = recordHolder.getNodeValue('//urn1:documentId')
    def patientId = recordHolder.getNodeValue('//urn1:patientId/urn1:id')
    def patientIdType = recordHolder.getNodeValue('//urn1:patientId/urn1:type')
    assert (patientId != context.patientId || patientIdType != context.patientIdType) != true : "Response contains a record with other PatientId. PatientId: ${patientId}, Type: ${patientIdType} DocumentId: ${documentId}"
}</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure result.resultCode equals OK"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
//urn:GetFunctionalStatusResponse[1]/urn:result[1]/urn1:resultCode[1]/text() = "OK"</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>true</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure a result.logId is returned"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
//urn:GetFunctionalStatusResponse[1]/urn:result[1]/urn1:logId[matches(., '.*')]</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" name="Response SLA"><con:configuration><SLA>15000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AND ensure date range is valid"><con:configuration><scriptText><![CDATA[import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper

def contextHelper = new ContextHelper(context)
def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
// Fetch properties from TestSuite Custom properties
holder.namespaces['urn'] = context.expand('${#TestSuite#urn}')
holder.namespaces['urn1'] = context.expand('${#TestSuite#urn1}')

def records = holder.getDomNodes(context.expand('${#TestSuite#headerNode}'))
if (records.length == 0) {
    contextHelper.fail("Response contains no records.")
    return
}

records.each {c ->
    def recordHolder = new XmlHolder( c )
    holder.namespaces.each {key, value -> recordHolder.namespaces[key] = value}
    patientId = context.timePeriodEnd;

    def documentId = recordHolder.getNodeValue('//urn1:documentId')
    def documentTime = recordHolder.getNodeValue('//urn1:documentTime')
    def authorTime = recordHolder.getNodeValue('//urn1:accountableHealthcareProfessional/urn1:authorTime')
    def signatureTime = recordHolder.getNodeValue('//urn1:legalAuthenticator/urn1:signatureTime')
    if (context.timePeriodStart <= authorTime[0..7] && authorTime[0..7] <= context.timePeriodEnd) {
        return
    }
    if (signatureTime != null && context.timePeriodStart <= signatureTime[0..7] && signatureTime[0..7] <= context.timePeriodEnd) {
        return
    }
    contextHelper.fail("Response contains a record outside given date range ${context.timePeriodStart} - ${context.timePeriodEnd}. DocumentId: $documentId")
}]]></scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AND ensure documentId's are valid"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper

def contextHelper = new ContextHelper(context)
def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
// Fetch properties from TestSuite Custom properties
holder.namespaces['urn'] = context.expand('${#TestSuite#urn}')
holder.namespaces['urn1'] = context.expand('${#TestSuite#urn1}')

def documentIds = holder.getNodeValues(context.expand('${#TestSuite#headerNode}') + '/urn1:documentId') as List
if (documentIds.size == 0 || documentIds == null) {
    contextHelper.fail("Response contains no documentId's.")
    return
}

def expectedDocumentIds = context.expectedDocumentIds ? context.expectedDocumentIds.tokenize(',') : []
def unexpectedDocumentIds = context.unexpectedDocumentIds ? context.unexpectedDocumentIds.tokenize(',') : []

documentIds.each {id ->
    if (unexpectedDocumentIds.contains(id)) {
        contextHelper.fail("Response contains a unexpected record. DocumentId: $id")
    }
}
expectedDocumentIds.each {id ->
    if (!documentIds.contains(id)) {
        contextHelper.fail("Response does not contain a expected record. DocumentId: $id")
    }
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="urn:riv:clinicalprocess:healthcond.description:GetFunctionalStatusResponder:2:GetFunctionalStatus" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CareUnitHSAId Filter" searchProperties="true" id="be4d6e47-1ae7-4e17-96a3-e55e18e07b98"><con:settings/><con:testStep type="groovy" name="GIVEN CareUnitHSAId Filter data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("CareUnitHsaId Filter")</script></con:config></con:testStep><con:testStep type="request" name="WHEN calling GetFunctionalStatus with patientId"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetFunctionalStatusResponderBinding</con:interface><con:operation>GetFunctionalStatus</con:operation><con:request name="WHEN calling GetFunctionalStatus with patientId"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="CareUnitHSAIdResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetFunctionalStatusResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetFunctionalStatus>
      <urn1:careUnitHSAId>${careUnitHSAId}</urn1:careUnitHSAId>
        <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetFunctionalStatus>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration><definition/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="THEN ensure all schematron rules passes"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
    new File(utils.projectPath + File.separator + "constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AND ensure patientId is correct"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper

def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
// Fetch properties from TestSuite Custom properties
holder.namespaces['urn'] = context.expand('${#TestSuite#urn}')
holder.namespaces['urn1'] = context.expand('${#TestSuite#urn1}')

def records = holder.getDomNodes(context.expand('${#TestSuite#headerNode}'))

if (records.length == 0) {
    contextHelper.fail("Response contains no records.")
    return
}

// Compare patientId and patientIdType in the response to what we have in data.xml for this test case.
records.each {c ->
    def recordHolder = new XmlHolder( c )
    holder.namespaces.each {key, value -> recordHolder.namespaces[key] = value}
    def documentId = recordHolder.getNodeValue('//urn1:documentId')
    def patientId = recordHolder.getNodeValue('//urn1:patientId/urn1:id')
    def patientIdType = recordHolder.getNodeValue('//urn1:patientId/urn1:type')
    if (patientId != context.patientId || patientIdType != context.patientIdType) {
        contextHelper.fail("Response contains a record with other PatientId. PatientId: ${patientId}, Type: ${patientIdType} DocumentId: ${documentId}")
    }
}</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure result.resultCode equals OK"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
//urn:GetFunctionalStatusResponse[1]/urn:result[1]/urn1:resultCode[1]/text() = "OK"</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>true</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure a result.logId is returned"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
//urn:GetFunctionalStatusResponse[1]/urn:result[1]/urn1:logId[matches(., '.*')]</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AND ensure careUnitHSAId is valid"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper

def contextHelper = new ContextHelper(context)
def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
// Fetch properties from TestSuite Custom properties
holder.namespaces['urn'] = context.expand('${#TestSuite#urn}')
holder.namespaces['urn1'] = context.expand('${#TestSuite#urn1}')

def records = holder.getDomNodes(context.expand('${#TestSuite#headerNode}'))
if (records.length == 0) {
    contextHelper.fail("Response contains no records.")
    return
}

records.each {c ->
    def recordHolder = new XmlHolder( c )
    holder.namespaces.each {key, value -> recordHolder.namespaces[key] = value}


    def documentId = recordHolder.getNodeValue('//urn1:documentId')
    def careUnitHSAId = recordHolder.getNodeValue('//urn1:healthcareProfessionalCareUnitHSAId')
    log.info(careUnitHSAId)
    log.info(context.careUnitHSAId)

    if (careUnitHSAId != context.careUnitHSAId) {
        contextHelper.fail("Response contains a record with other CareUnitHSAId. CareUnitHSAId: ${careUnitHSAId} DocumentId: ${documentId}")
    }
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AND ensure documentIds are valid"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper

def contextHelper = new ContextHelper(context)
def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
// Fetch properties from TestSuite Custom properties
holder.namespaces['urn'] = context.expand('${#TestSuite#urn}')
holder.namespaces['urn1'] = context.expand('${#TestSuite#urn1}')

def documentIds = holder.getNodeValues(context.expand('${#TestSuite#headerNode}') + '/urn1:documentId') as List
if (documentIds.size == 0 || documentIds == null) {
    contextHelper.fail("Response contains no documentId's.")
    return
}

def expectedDocumentIds = context.expectedDocumentIds ? context.expectedDocumentIds.tokenize(',') : []
def unexpectedDocumentIds = context.unexpectedDocumentIds ? context.unexpectedDocumentIds.tokenize(',') : []

documentIds.each {id ->
    if (unexpectedDocumentIds.contains(id)) {
        contextHelper.fail("Response contains a unexpected record. DocumentId: $id")
    }
}
expectedDocumentIds.each {id ->
    if (!documentIds.contains(id)) {
        contextHelper.fail("Response does not contain a expected record. DocumentId: $id")
    }
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="urn:riv:clinicalprocess:healthcond.description:GetFunctionalStatusResponder:2:GetFunctionalStatus" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CareContactId Filter" searchProperties="true" id="a6a8f333-20fe-4a6f-96fb-2b2dfc173537"><con:settings/><con:testStep type="groovy" name="GIVEN CareContactId Filter data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("CareContactId Filter")</script></con:config></con:testStep><con:testStep type="request" name="WHEN calling GetFunctionalStatus with patientId"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetFunctionalStatusResponderBinding</con:interface><con:operation>GetFunctionalStatus</con:operation><con:request name="WHEN calling GetFunctionalStatus with patientId"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="CareContactResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetFunctionalStatusResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetFunctionalStatus>
        <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:careContactId>${careContactId}</urn1:careContactId>
      </urn1:GetFunctionalStatus>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration><definition/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="THEN ensure all schematron rules passes"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
    new File(utils.projectPath + File.separator + "constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AND ensure patientId is correct"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper

def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
// Fetch properties from TestSuite Custom properties
holder.namespaces['urn'] = context.expand('${#TestSuite#urn}')
holder.namespaces['urn1'] = context.expand('${#TestSuite#urn1}')

def records = holder.getDomNodes(context.expand('${#TestSuite#headerNode}'))

if (records.length == 0) {
    contextHelper.fail("Response contains no records.")
    return
}

// Compare patientId and patientIdType in the response to what we have in data.xml for this test case.
records.each {c ->
    def recordHolder = new XmlHolder( c )
    holder.namespaces.each {key, value -> recordHolder.namespaces[key] = value}
    def documentId = recordHolder.getNodeValue('//urn1:documentId')
    def patientId = recordHolder.getNodeValue('//urn1:patientId/urn1:id')
    def patientIdType = recordHolder.getNodeValue('//urn1:patientId/urn1:type')
    if (patientId != context.patientId || patientIdType != context.patientIdType) {
        contextHelper.fail("Response contains a record with other PatientId. PatientId: ${patientId}, Type: ${patientIdType} DocumentId: ${documentId}")
    }
}</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure result.resultCode equals OK"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
//urn:GetFunctionalStatusResponse[1]/urn:result[1]/urn1:resultCode[1]/text() = "OK"</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>true</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure a result.logId is returned"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
//urn:GetFunctionalStatusResponse[1]/urn:result[1]/urn1:logId[matches(., '.*')]</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AND ensure documentId's are valid"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper

def contextHelper = new ContextHelper(context)
def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
// Fetch properties from TestSuite Custom properties
holder.namespaces['urn'] = context.expand('${#TestSuite#urn}')
holder.namespaces['urn1'] = context.expand('${#TestSuite#urn1}')

def documentIds = holder.getNodeValues(context.expand('${#TestSuite#headerNode}') + '/urn1:documentId') as List
if (documentIds.size == 0 || documentIds == null) {
    contextHelper.fail("Response contains no documentId's.")
    return
}

def expectedDocumentIds = context.expectedDocumentIds ? context.expectedDocumentIds.tokenize(',') : []
def unexpectedDocumentIds = context.unexpectedDocumentIds ? context.unexpectedDocumentIds.tokenize(',') : []

documentIds.each {id ->
    if (unexpectedDocumentIds.contains(id)) {
        contextHelper.fail("Response contains a unexpected record. DocumentId: $id")
    }
}
expectedDocumentIds.each {id ->
    if (!documentIds.contains(id)) {
        contextHelper.fail("Response does not contain a expected record. DocumentId: $id")
    }
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="urn:riv:clinicalprocess:healthcond.description:GetFunctionalStatusResponder:2:GetFunctionalStatus" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="HTTPHeader Filter" searchProperties="true" id="036f114e-7976-47ed-b564-0c4062bbd13d"><con:settings/><con:testStep type="groovy" name="GIVEN HTTPHeader Filter data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("HTTPHeader Filter")</script></con:config></con:testStep><con:testStep type="request" name="WHEN calling GetFunctionalStatus with patientId"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetFunctionalStatusResponderBinding</con:interface><con:operation>GetFunctionalStatus</con:operation><con:request name="WHEN calling GetFunctionalStatus with patientId"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="HTTPHeaderResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetFunctionalStatusResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetFunctionalStatus>
        <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetFunctionalStatus>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration><definition/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="THEN ensure all schematron rules passes"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
    new File(utils.projectPath + File.separator + "constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AND ensure patientId is correct"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper

def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
// Fetch properties from TestSuite Custom properties
holder.namespaces['urn'] = context.expand('${#TestSuite#urn}')
holder.namespaces['urn1'] = context.expand('${#TestSuite#urn1}')

def records = holder.getDomNodes(context.expand('${#TestSuite#headerNode}'))

if (records.length == 0) {
    contextHelper.fail("Response contains no records.")
    return
}

// Compare patientId and patientIdType in the response to what we have in data.xml for this test case.
records.each {c ->
    def recordHolder = new XmlHolder( c )
    holder.namespaces.each {key, value -> recordHolder.namespaces[key] = value}
    def documentId = recordHolder.getNodeValue('//urn1:documentId')
    def patientId = recordHolder.getNodeValue('//urn1:patientId/urn1:id')
    def patientIdType = recordHolder.getNodeValue('//urn1:patientId/urn1:type')
    if (patientId != context.patientId || patientIdType != context.patientIdType) {
        contextHelper.fail("Response contains a record with other PatientId. PatientId: ${patientId}, Type: ${patientIdType} DocumentId: ${documentId}")
    }
}</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure result.resultCode equals OK"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
//urn:GetFunctionalStatusResponse[1]/urn:result[1]/urn1:resultCode[1]/text() = "OK"</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>true</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure a result.logId is returned"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
//urn:GetFunctionalStatusResponse[1]/urn:result[1]/urn1:logId[matches(., '.*')]</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AND ensure documentId's are valid"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper

def contextHelper = new ContextHelper(context)
def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
// Fetch properties from TestSuite Custom properties
holder.namespaces['urn'] = context.expand('${#TestSuite#urn}')
holder.namespaces['urn1'] = context.expand('${#TestSuite#urn1}')

def documentIds = holder.getNodeValues(context.expand('${#TestSuite#headerNode}') + '/urn1:documentId') as List
if (documentIds.size == 0 || documentIds == null) {
    contextHelper.fail("Response contains no documentId's.")
    return
}

def expectedDocumentIds = context.expectedDocumentIds ? context.expectedDocumentIds.tokenize(',') : []
def unexpectedDocumentIds = context.unexpectedDocumentIds ? context.unexpectedDocumentIds.tokenize(',') : []

documentIds.each {id ->
    if (unexpectedDocumentIds.contains(id)) {
        contextHelper.fail("Response contains a unexpected record. DocumentId: $id")
    }
}
expectedDocumentIds.each {id ->
    if (!documentIds.contains(id)) {
        contextHelper.fail("Response does not contain a expected record. DocumentId: $id")
    }
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="urn:riv:clinicalprocess:healthcond.description:GetFunctionalStatusResponder:2:GetFunctionalStatus" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="NonExistent PatientId" searchProperties="true" id="549f747b-0f82-456f-b473-28bd206a4653"><con:settings/><con:testStep type="groovy" name="GIVEN NonExistent PatientId data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("NonExisting PatientId")</script></con:config></con:testStep><con:testStep type="request" name="WHEN calling GetFunctionalStatus with patientId"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetFunctionalStatusResponderBinding</con:interface><con:operation>GetFunctionalStatus</con:operation><con:request name="WHEN calling GetFunctionalStatus with patientId"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="EmptyResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetFunctionalStatusResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetFunctionalStatus>
         <urn1:careUnitHSAId>?</urn1:careUnitHSAId>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:sourceSystemHSAId>${sourceSystemHSAid}</urn1:sourceSystemHSAId>
         <urn1:careContactId>${careContactId}</urn1:careContactId>
      </urn1:GetFunctionalStatus>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration><definition/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="THEN ensure all schematron rules passes"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
    new File(utils.projectPath + File.separator + "constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure result.resultCode equals OK"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
//urn:GetFunctionalStatusResponse[1]/urn:result[1]/urn1:resultCode[1]/text() = "OK"</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>true</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure a result.logId is returned"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
//urn:GetFunctionalStatusResponse[1]/urn:result[1]/urn1:logId[matches(., '.*')]</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure we got zero records"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
count(//urn:GetFunctionalStatusResponse[1]/urn:functionalStatusAssessment)</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="urn:riv:clinicalprocess:healthcond.description:GetFunctionalStatusResponder:2:GetFunctionalStatus" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="NonExistent CareContactId" searchProperties="true" id="e1a1e4d8-ef6b-4cec-becf-c8c19797607a"><con:settings/><con:testStep type="groovy" name="GIVEN NonExistent CareContactId data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("NonExisting CareContactId")</script></con:config></con:testStep><con:testStep type="request" name="WHEN calling GetFunctionalStatus with patientId"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetFunctionalStatusResponderBinding</con:interface><con:operation>GetFunctionalStatus</con:operation><con:request name="WHEN calling GetFunctionalStatus with patientId"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="EmptyResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetFunctionalStatusResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetFunctionalStatus>
         <urn1:careUnitHSAId>?</urn1:careUnitHSAId>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:sourceSystemHSAId>${sourceSystemHSAid}</urn1:sourceSystemHSAId>
         <urn1:careContactId>${careContactId}</urn1:careContactId>
      </urn1:GetFunctionalStatus>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration><definition/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="THEN ensure all schematron rules passes"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
    new File(utils.projectPath + File.separator + "constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure result.resultCode equals OK"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
//urn:GetFunctionalStatusResponse[1]/urn:result[1]/urn1:resultCode[1]/text() = "OK"</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>true</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure a result.logId is returned"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
//urn:GetFunctionalStatusResponse[1]/urn:result[1]/urn1:logId[matches(., '.*')]</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure zero records returned"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
count(//urn:GetFunctionalStatusResponse[1]/urn:functionalStatusAssessment)</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="urn:riv:clinicalprocess:healthcond.description:GetFunctionalStatusResponder:2:GetFunctionalStatus" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>urn</con:name><con:value>urn:riv:clinicalprocess:healthcond:description:GetFunctionalStatusResponder:2</con:value></con:property><con:property><con:name>urn1</con:name><con:value>urn:riv:clinicalprocess:healthcond:description:2</con:value></con:property><con:property><con:name>headerNode</con:name><con:value>/soapenv:Envelope/soapenv:Body/urn:GetFunctionalStatusResponse/urn:functionalStatusAssessment/urn1:functionalStatusAssessmentHeader</con:value></con:property></con:properties></con:testSuite><con:testSuite name="Fault tests"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verify sourceSystemHSAId and LogicalAddress" searchProperties="true" id="903e6eed-109b-4f19-b546-5e90372c4d3c"><con:settings/><con:testStep type="groovy" name="GIVEN SourceSystemHSAId and LogicalAddress data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("SourceSystemHSAId and LogicalAddress")</script></con:config></con:testStep><con:testStep type="request" name="WHEN calling GetFunctionalStatus"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetFunctionalStatusResponderBinding</con:interface><con:operation>GetFunctionalStatus</con:operation><con:request name="WHEN calling GetFunctionalStatus"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="ERROR"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value=""/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetFunctionalStatusResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetFunctionalStatus>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
      </urn1:GetFunctionalStatus>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="XPath Match" name="AND ensure resultCode equals ERROR"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:description:2';
declare namespace urn='urn:riv:clinicalprocess:healthcond:description:GetFunctionalStatusResponder:2';
//urn:GetFunctionalStatusResponse[1]/urn:result[1]/urn1:resultCode/text()</path><content>ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure errorCode equals INVALID_REQUEST"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:description:2';
declare namespace urn='urn:riv:clinicalprocess:healthcond:description:GetFunctionalStatusResponder:2';
//urn:GetFunctionalStatusResponse[1]/urn:result[1]/urn1:errorCode/text()</path><content>INVALID_REQUEST</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verify sourceSystemHSAId and CareContactId" searchProperties="true" id="9618f1df-cdfb-42c1-9733-50824e8ca6ad"><con:settings/><con:testStep type="groovy" name="GIVEN SourceSystemHSAId and CareContactId data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("SourceSystemHSAId and CareContactId")</script></con:config></con:testStep><con:testStep type="request" name="WHEN calling GetFunctionalStatus"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetFunctionalStatusResponderBinding</con:interface><con:operation>GetFunctionalStatus</con:operation><con:request name="WHEN calling GetFunctionalStatus"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="ERROR"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value=""/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetFunctionalStatusResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetFunctionalStatus>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
         <urn1:careContactId>${careContactId}</urn1:careContactId>
      </urn1:GetFunctionalStatus>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="XPath Match" name="AND ensure resultCode equals ERROR"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:description:2';
declare namespace urn='urn:riv:clinicalprocess:healthcond:description:GetFunctionalStatusResponder:2';
//urn:GetFunctionalStatusResponse[1]/urn:result[1]/urn1:resultCode/text()</path><content>ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure errorCode equals INVALID_REQUEST"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:description:2';
declare namespace urn='urn:riv:clinicalprocess:healthcond:description:GetFunctionalStatusResponder:2';
//urn:GetFunctionalStatusResponse[1]/urn:result[1]/urn1:errorCode/text()</path><content>INVALID_REQUEST</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>