<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="GetDiagnosis" resourceRoot="${projectDir}" soapui-version="5.0.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="GetDiagnosisResponderBinding" type="wsdl" bindingName="{urn:riv:clinicalprocess:healthcond:description:GetDiagnosis:2:rivtabp21}GetDiagnosisResponderBinding" soapVersion="1_1" anonymous="optional" definition="../../schemas/interactions/GetDiagnosisInteraction/GetDiagnosisInteraction_2.0_RIVTABP21.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/Users/khaled/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/description/trunk/schemas/interactions/GetDiagnosisInteraction/GetDiagnosisInteraction_2.0_RIVTABP21.wsdl"><con:part><con:url>file:/Users/khaled/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/description/trunk/schemas/interactions/GetDiagnosisInteraction/GetDiagnosisInteraction_2.0_RIVTABP21.wsdl</con:url><con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<wsdl:definitions name="GetDiagnosisInteraction" targetNamespace="urn:riv:clinicalprocess:healthcond:description:GetDiagnosis:2:rivtabp21" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tjsr="urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2" xmlns:tjsi="urn:riv:clinicalprocess:healthcond:description:GetDiagnosisInitiator:2" xmlns:tns="urn:riv:clinicalprocess:healthcond:description:GetDiagnosis:2:rivtabp21" xmlns:itr="urn:riv:itintegration:registry:1">
  <xs:annotation>
    <xs:documentation>Tjänsteinteraktionens namn: GetDiagnosisInteraction
			 Beskrivning: 
			   Request care documentation for a subject of care
			 Revisioner: 
			 Tjänstedomän: clinicalprocess:healthcond:description
			 Tjänsteinteraktionstyp: Fråga-Svar
			 WS-profil: RIVTABP21
			 Förvaltas av: Sveriges Kommuner och Landsting</xs:documentation>
  </xs:annotation>
  <wsdl:types>
    <xs:schema targetNamespace="urn:riv:clinicalprocess:healthcond:description:GetDiagnosis:2:rivtabp21">
      <xs:import schemaLocation="GetDiagnosisResponder_2.0.xsd" namespace="urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2"/>
      <xs:import schemaLocation="../../core_components/itintegration_registry_1.0.xsd" namespace="urn:riv:itintegration:registry:1"/>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="GetDiagnosisRequest">
    <wsdl:part name="LogicalAddress" element="itr:LogicalAddress">
      <wsdl:documentation>National: The HSA-id of Inera AB ("national" aggregation service)
			Regional: The HSA-id of Inera AB (regional aggregation service)
			Specific Source system: The HSA-id of the source system</wsdl:documentation>
    </wsdl:part>
    <wsdl:part name="parameters" element="tjsr:GetDiagnosis"/>
  </wsdl:message>
  <wsdl:message name="GetDiagnosisResponse">
    <wsdl:part name="parameters" element="tjsr:GetDiagnosisResponse"/>
  </wsdl:message>
  <wsdl:portType name="GetDiagnosisResponderInterface">
    <wsdl:operation name="GetDiagnosis">
      <wsdl:input message="tns:GetDiagnosisRequest"/>
      <wsdl:output message="tns:GetDiagnosisResponse"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="GetDiagnosisResponderBinding" type="tns:GetDiagnosisResponderInterface">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="GetDiagnosis">
      <soap:operation soapAction="urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2:GetDiagnosis" style="document"/>
      <wsdl:input>
        <soap:header use="literal" message="tns:GetDiagnosisRequest" part="LogicalAddress"/>
        <soap:body use="literal" parts="parameters"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="GetDiagnosisResponderService">
    <wsdl:port name="GetDiagnosisResponderPort" binding="tns:GetDiagnosisResponderBinding">
      <soap:address location="http://tempuri.org"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>file:/Users/khaled/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/description/trunk/schemas/interactions/GetDiagnosisInteraction/GetDiagnosisResponder_2.0.xsd</con:url><con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<xs:schema targetNamespace="urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2" elementFormDefault="qualified" attributeFormDefault="unqualified" version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2" xmlns:core="urn:riv:clinicalprocess:healthcond:description:2" xmlns:codes="urn:riv:clinicalprocess:healthcond:description:enums:2">
  <xs:import schemaLocation="../../core_components/clinicalprocess_healthcond_description_2.1.xsd" namespace="urn:riv:clinicalprocess:healthcond:description:2"/>
  <xs:import schemaLocation="../../core_components/clinicalprocess_healthcond_description_enum_2.1.xsd" namespace="urn:riv:clinicalprocess:healthcond:description:enums:2"/>
  <xs:element name="GetDiagnosis" type="tns:GetDiagnosisType"/>
  <xs:element name="GetDiagnosisResponse" type="tns:GetDiagnosisResponseType"/>
  <xs:complexType name="GetDiagnosisType">
    <xs:sequence>
      <xs:element name="careUnitHSAId" type="core:HSAIdType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="patientId" type="core:PersonIdType"/>
      <xs:element name="timePeriod" type="core:DatePeriodType" minOccurs="0"/>
      <xs:element name="sourceSystemHSAId" type="core:HSAIdType" minOccurs="0"/>
      <xs:element name="careContactId" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="GetDiagnosisResponseType">
    <xs:annotation>
      <xs:documentation>careDocumentation: 
					De vårddokument som matchar begäran.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="diagnosis" type="core:DiagnosisType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element minOccurs="0" name="result" type="core:ResultType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/khaled/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/description/trunk/schemas/core_components/clinicalprocess_healthcond_description_2.1.xsd</con:url><con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<xs:schema targetNamespace="urn:riv:clinicalprocess:healthcond:description:2" elementFormDefault="qualified" attributeFormDefault="unqualified" version="2.1" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn:riv:clinicalprocess:healthcond:description:2" xmlns:codes="urn:riv:clinicalprocess:healthcond:description:enums:2">
  <xs:import schemaLocation="./clinicalprocess_healthcond_description_enum_2.1.xsd" namespace="urn:riv:clinicalprocess:healthcond:description:enums:2"/>
  <xs:complexType name="CareDocumentationType">
    <xs:sequence>
      <xs:element name="careDocumentationHeader" type="tns:CPatientSummaryHeaderType"/>
      <xs:element name="careDocumentationBody" type="tns:CareDocumentationBodyType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CareDocumentationBodyType">
    <xs:annotation>
      <xs:documentation>clinicalDocumentNote: 
					Dokument/anteckning
				multimediaEntry:
					Multimedia som finns i dokumentet, motsvaras av platshållare i careDocumentNoteText</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="clinicalDocumentNote" type="tns:ClinicalDocumentNoteType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="FunctionalStatusAssessmentType">
    <xs:sequence>
      <xs:element name="functionalStatusAssessmentHeader" type="tns:PatientSummaryHeaderType"/>
      <xs:element name="functionalStatusAssessmentBody" type="tns:FunctionalStatusAssessmentBodyType"/>
      <xs:element name="relation" type="tns:RelationType" maxOccurs="unbounded" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="FunctionalStatusAssessmentBodyType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="assessmentCategory" type="codes:AssessmentCategoryEnum"/>
      <xs:element minOccurs="0" name="comment" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="padl" type="tns:PADLType"/>
      <xs:element maxOccurs="1" minOccurs="0" name="disability" type="tns:DisabilityType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RelationType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="tns:CVType" minOccurs="1"/>
      <xs:element name="referredInformation" type="tns:ReferredInformationType" minOccurs="1"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ReferredInformationType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="tns:IIType" minOccurs="1"/>
      <xs:element name="time" type="tns:TimeStampType"/>
      <xs:element name="type" type="xs:string" minOccurs="1"/>
      <xs:element name="informationOwner" type="tns:InformationOwnerType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="InformationOwnerType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="tns:IIType" minOccurs="1"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <!--@TODO better names for clinicalDocumentNoteCode-->
  <xs:complexType name="ClinicalDocumentNoteType">
    <xs:annotation>
      <xs:documentation>
        Dokument/anteckning

                clinicalDocumentNoteCode: 
                    Typ av vård- och omsorgsdokument. 
                clinicalDocumentNoteTitle: 
                    Titel på dokument
                clinicalDocumentNoteText: 
                    Själva dokumentet. 
                    Formatet i textfältet ska följa HL7 CDA "Narrative Block". 
                    Om dokumentet innehåller multimedia läggs en platshållare i texten enligt formatet
        <renderMultiMedia referencedObject="MM1"/>
        . 
                    Innehåller dokumentet fler multimedia läggs ytterligare platshållare i texten, där referencesObject får namn "MM2", "MM3" osv
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="clinicalDocumentNoteCode" type="codes:ClinicalDocumentNoteCodeEnum" minOccurs="0" maxOccurs="1"/>
      <xs:element name="clinicalDocumentTypeCode" type="codes:ClinicalDocumentTypeCodeEnum" minOccurs="0" maxOccurs="1"/>
      <xs:element name="clinicalDocumentNoteTitle" type="xs:string" minOccurs="0"/>
      <xs:element name="clinicalDocumentNoteText" type="xs:string" maxOccurs="1" minOccurs="0"/>
      <xs:element name="multimediaEntry" type="tns:MultimediaType" minOccurs="0" maxOccurs="1"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="dissentingOpinion" type="tns:DissentingOpinionType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PatientSummaryHeaderType">
    <xs:annotation>
      <xs:documentation>documentId: 
                    Vårddokumentets unika identifierare.
                    OID kan sättas till 1.2.752.129.2.1.2.1 
                    (Icke-nationell identifierare Org+lokalt unikt id)
				sourceSystemHSAId: 
	                HSAid för det system som dokumentet är skapat i
                documentTitle: 
                    Titel på dokumentet/anteckningen
                documentTime: 
                    Relevant tid, definieras för varje meddelande
                patientId: 
                    Patientens ID. Root sätts till typ av patientidentifierare
                    Bland tillåtna typer för finns: 
                    personnummer (1.2.752.129.2.1.3.1), 
                    samordningsnummer (1.2.752.129.2.1.3.3), 
                    reservnummer SLL (1.2.752.97.3.1.3)
                author
                    Information om författare till dokumentet
                legalAuthenticator
                    Information om vem som signerat informationen i dokumentet.
                approvedForPatient:
                    Anger om information får delas till patient. Värdet sätts i 
                    sådant fall till true, i annat fall till false.
                careContactId:
                    Identitet för den vård- och omsorgskontakt som föranlett den 
                    information som omfattas av dokumentet. Identiteten är unik 
                    inom källsystemet.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="documentId" type="xs:string"/>
      <xs:element name="sourceSystemHSAId" type="tns:HSAIdType"/>
      <xs:element name="documentTitle" type="xs:string" minOccurs="0"/>
      <xs:element name="documentTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="patientId" type="tns:PersonIdType"/>
      <xs:element name="accountableHealthcareProfessional" type="tns:HealthcareProfessionalType"/>
      <xs:element name="legalAuthenticator" type="tns:LegalAuthenticatorType" minOccurs="0"/>
      <xs:element name="approvedForPatient" type="xs:boolean"/>
      <xs:element name="careContactId" type="xs:string" minOccurs="0"/>
      <xs:element minOccurs="0" name="nullified" type="xs:boolean"/>
      <xs:element minOccurs="0" name="nullifiedReason" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <!--Only used here to keep backwards compatibility with GetCareDocumentation 2.0, must be removed in favour
        of PatientSummaryHeaderType above when we go for the next major version-->
  <xs:complexType name="CPatientSummaryHeaderType">
    <xs:annotation>
      <xs:documentation>documentId: 
                Vårddokumentets unika identifierare.
                OID kan sättas till 1.2.752.129.2.1.2.1 
                (Icke-nationell identifierare Org+lokalt unikt id)
                sourceSystemHSAid: 
                HSAid för det system som dokumentet är skapat i
                documentTitle: 
                Titel på dokumentet/anteckningen
                documentTime: 
                Relevant tid, definieras för varje meddelande
                patientId: 
                Patientens ID. Root sätts till typ av patientidentifierare
                Bland tillåtna typer för finns: 
                personnummer (1.2.752.129.2.1.3.1), 
                samordningsnummer (1.2.752.129.2.1.3.3), 
                reservnummer SLL (1.2.752.97.3.1.3)
                author
                Information om författare till dokumentet
                legalAuthenticator
                Information om vem som signerat informationen i dokumentet.
                approvedForPatient:
                Anger om information får delas till patient. Värdet sätts i 
                sådant fall till true, i annat fall till false.
                careContactId:
                Identitet för den vård- och omsorgskontakt som föranlett den 
                information som omfattas av dokumentet. Identiteten är unik 
                inom källsystemet.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="documentId" type="xs:string"/>
      <xs:element name="sourceSystemHSAid" type="tns:HSAIdType"/>
      <xs:element name="documentTitle" type="xs:string" minOccurs="0"/>
      <xs:element name="documentTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="patientId" type="tns:PersonIdType"/>
      <xs:element name="accountableHealthcareProfessional" type="tns:HealthcareProfessionalType"/>
      <xs:element name="legalAuthenticator" type="tns:LegalAuthenticatorType" minOccurs="0"/>
      <xs:element name="approvedForPatient" type="xs:boolean"/>
      <xs:element name="careContactId" type="xs:string" minOccurs="0"/>
      <xs:element minOccurs="0" name="nullified" type="xs:boolean"/>
      <xs:element minOccurs="0" name="nullifiedReason" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="HealthcareProfessionalType">
    <xs:annotation>
      <xs:documentation>Information om hälso- och omsorgspesonal
                
                healthcareProfessionalHsaId: 
                HSA-id för vård- och omsorgspersonal 
                healthcareProfessionalName
                Namn på vård- och omsorgspersonal
                healthcareProfessionalRoleCode: 
                Information om personens befattning. Om möjligt skall KV Befattning (OID 1.2.752.129.2.2.1.4), se 
                http://www.inera.se/Documents/TJANSTER_PROJEKT/Katalogtjanst_HSA/Innehall/hsa_innehall_befattning.pdf
                healthcareProfessionalCareUnitHSAid: 
                HSA-id för PDL-enhet som vård- och omsorgspersonen är uppdragstagare för
                healthcareProfessionalCareGiverHSAid: 
                HSA-id för vårdgivaren, som är vårdgivare för den enhet som författaren är uppdragstagare för</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="authorTime" type="tns:TimeStampType"/>
      <xs:element name="healthcareProfessionalHSAId" type="tns:HSAIdType" minOccurs="0"/>
      <xs:element name="healthcareProfessionalName" type="xs:string" minOccurs="0"/>
      <xs:element name="healthcareProfessionalRoleCode" type="tns:CVType" minOccurs="0"/>
      <xs:element name="healthcareProfessionalOrgUnit" type="tns:OrgUnitType" minOccurs="0"/>
      <xs:element name="healthcareProfessionalCareUnitHSAId" type="tns:HSAIdType" minOccurs="0"/>
      <xs:element minOccurs="0" name="healthcareProfessionalCareGiverHSAId" type="tns:HSAIdType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OrgUnitType">
    <xs:annotation>
      <xs:documentation>Information om en organisationsenhet
                
                careContactOrgUnitHsaId: 
                HSA-id för organisationsenhet
                careContactOrgUnitName
                Namn på organisationsenhet
                careContactOrgUnitTelecom: 
                Telefon till organisationsenhet
                careContactOrgUnitEmail: 
                Epost till enhet
                careContactOrgUnitAddress: 
                Postadress till enhet
                careContactOrgUnitLocation: 
                Text som anger namnet på plats eller ort för enhetens eller funktionens fysiska placering</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="orgUnitHSAId" type="tns:HSAIdType" minOccurs="1"/>
      <xs:element name="orgUnitName" type="xs:string" minOccurs="1"/>
      <xs:element name="orgUnitTelecom" type="xs:string" minOccurs="0"/>
      <xs:element name="orgUnitEmail" type="xs:string" minOccurs="0"/>
      <xs:element name="orgUnitAddress" type="xs:string" minOccurs="0"/>
      <xs:element name="orgUnitLocation" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DiagnosisType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="diagnosisHeader" type="tns:PatientSummaryHeaderType"/>
      <xs:element name="diagnosisBody" type="tns:DiagnosisBodyType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DiagnosisBodyType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="typeOfDiagnosis" type="codes:DiagnosisTypeEnum"/>
      <xs:element minOccurs="0" name="chronicDiagnosis" type="xs:boolean"/>
      <xs:element name="diagnosisTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="diagnosisCode" type="tns:CVType" minOccurs="0"/>
      <xs:element name="relatedDiagnosis" type="tns:RelatedDiagnosisType" maxOccurs="unbounded" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AlertInformationType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="alertInformationHeader" type="tns:PatientSummaryHeaderType"/>
      <xs:element name="alertInformationBody" type="tns:AlertInformationBodyType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RelatedDiagnosisType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="documentId" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AlertInformationBodyType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="typeOfAlertInformation" type="tns:CVType"/>
      <xs:element name="ascertainedDate" type="tns:DateType" minOccurs="0"/>
      <xs:element name="verifiedTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="validityTimePeriod" type="tns:TimePeriodType"/>
      <xs:element name="alertInformationComment" type="xs:string" minOccurs="0"/>
      <xs:element name="obsoleteTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="obsoleteComment" type="xs:string" minOccurs="0"/>
      <xs:element name="hypersensitivity" type="tns:HyperSensitivityType" minOccurs="0"/>
      <xs:element name="seriousDisease" type="tns:SeriousDiseaseType" minOccurs="0"/>
      <xs:element name="treatment" type="tns:TreatmentType" minOccurs="0"/>
      <xs:element name="communicableDisease" type="tns:CommunicableDiseaseType" minOccurs="0"/>
      <xs:element name="restrictionOfCare" minOccurs="0" type="tns:RestrictionOfCareType"/>
      <xs:element name="unstructuredAlertInformation" minOccurs="0" type="tns:UnstructuredAlertInformationType"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="relatedAlertInformation" type="tns:RelatedAlertInformationType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="HyperSensitivityType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="typeOfHypersensitivity" type="tns:CVType" minOccurs="0"/>
      <xs:element name="degreeOfSeverity" type="tns:CVType" minOccurs="0"/>
      <xs:element name="degreeOfCertainty" type="tns:CVType" minOccurs="0"/>
      <xs:element name="pharmaceuticalHypersensitivity" type="tns:PharmaceuticalHypersensitivityType" minOccurs="0"/>
      <xs:element name="otherHypersensitivity" type="tns:OtherHypersensitivityType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PharmaceuticalHypersensitivityType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="atcSubstance" type="tns:CVType" minOccurs="0"/>
      <xs:element name="nonATCSubstance" type="xs:string" minOccurs="0"/>
      <xs:element name="nonATCSubstanceComment" type="xs:string" minOccurs="0"/>
      <xs:element name="pharmaceuticalProductId" type="tns:CVType" maxOccurs="unbounded" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OtherHypersensitivityType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="hypersensitivityAgent" type="xs:string" minOccurs="0"/>
      <xs:element name="hypersensitivityAgentCode" type="tns:CVType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SeriousDiseaseType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="disease" type="tns:CVType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="TreatmentType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="treatmentDescription" type="xs:string"/>
      <xs:element name="treatmentCode" type="tns:CVType" minOccurs="0"/>
      <xs:element name="pharmaceuticalTreatment" type="tns:CVType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CommunicableDiseaseType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="communicableDiseaseCode" type="tns:CVType"/>
      <xs:element name="routeOfTransmission" type="tns:CVType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RestrictionOfCareType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="restrictionOfCareComment" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="UnstructuredAlertInformationType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="unstructuredAlertInformationHeading" type="xs:string"/>
      <xs:element name="unstructuredAlertInformationContent" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RelatedAlertInformationType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="typeOfAlertInformationRelationship" type="tns:CVType"/>
      <xs:element name="relationComment" type="xs:string" minOccurs="0"/>
      <xs:element name="documentId" type="xs:string" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PADLType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="typeOfAssessment" type="tns:CVType"/>
      <xs:element name="assessment" type="xs:string" minOccurs="1"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DisabilityType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="disabilityAssessment" type="tns:CVType"/>
      <xs:element name="comment" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <!--Below: only helper types allowed.
        
        A helper type is a type used in one ore more of the domain schema common types.
        It can also be a type used in two or more service schemas.-->
  <xs:complexType name="DatePeriodType">
    <xs:annotation>
      <xs:documentation>Används för att specificera ett datumintervall
                med hjälp av start- och slutdatum.
                
                start: 
                    Startdatum på formatet ÅÅÅÅMMDD
                end: 
                    Slutdatum på formatet ÅÅÅÅMMDD</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="start" type="tns:DateType"/>
      <xs:element name="end" type="tns:DateType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <!--YYYYMMDD-->
  <xs:simpleType name="DateType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="(19|20)\d\d(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])"/>
    </xs:restriction>
  </xs:simpleType>
  <!--@TODO Should we have maxlength 64?-->
  <xs:simpleType name="HSAIdType">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:complexType name="MultimediaType">
    <xs:sequence>
      <xs:element name="mediaType" type="codes:MediaTypeEnum"/>
      <xs:sequence>
        <xs:element name="value" type="xs:base64Binary" minOccurs="0"/>
        <xs:element name="reference" type="xs:anyURI" minOccurs="0"/>
        <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="TimePeriodType">
    <xs:annotation>
      <xs:documentation>Används för att specificera ett datumintervall
                med hjälp av start- och slutdatum.
                
                start: 
                Startdatum på formatet YYYYMMDDhhmmss
                end: 
                Slutdatum på formatet YYYYMMDDhhmmss</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="start" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="end" type="tns:TimeStampType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="TimeStampType">
    <xs:annotation>
      <xs:documentation>A quantity specifying a point on the axis of natural time.
                A point in time is most often represented as a calendar
                expression.
                
                The time has the format YYYYMMDDhhmmss</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="(19|20)\d\d(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|1[0-9]|2[0123])([0-5])([0-9])([0-5])([0-9])"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="CVType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="xs:string" minOccurs="0"/>
      <xs:element name="codeSystem" type="xs:string" minOccurs="0"/>
      <xs:element name="codeSystemName" type="xs:string" minOccurs="0"/>
      <xs:element name="codeSystemVersion" type="xs:string" minOccurs="0"/>
      <xs:element name="displayName" type="xs:string" minOccurs="0"/>
      <xs:element name="originalText" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="LegalAuthenticatorType">
    <xs:annotation>
      <xs:documentation>Information om signering
            
            signatureTime: 
            Tidpunkt för signering, format ÅÅÅÅMMDDttmmss. 
            legalAuthenticatorHSAId: 
            Information om person som signerat dokumentet
            legalAuthenticatorName:
            Information om person som signerat dokumentet</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="signatureTime" type="tns:TimeStampType"/>
      <xs:element name="legalAuthenticatorHSAId" type="tns:HSAIdType" minOccurs="0"/>
      <xs:element name="legalAuthenticatorName" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DissentingOpinionType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="opinionId" type="tns:IIType" minOccurs="0"/>
      <xs:element name="authorTime" type="tns:TimeStampType" minOccurs="1"/>
      <xs:element name="opinion" type="xs:string"/>
      <xs:element name="personId" type="tns:PersonIdType"/>
      <xs:element name="personName" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PQType">
    <xs:sequence>
      <xs:element name="value" type="xs:double"/>
      <xs:element name="unit" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="IIType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="root" type="xs:string"/>
      <xs:element name="extension" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PersonIdType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:string"/>
      <xs:element name="type" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="communicableDisease" type="tns:CommunicableDiseaseType"/>
  <xs:complexType name="ResultType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="resultCode" type="codes:ResultCodeEnum"/>
      <xs:element name="errorCode" type="codes:ErrorCodeEnum" minOccurs="0"/>
      <xs:element name="logId" type="xs:string"/>
      <xs:element minOccurs="0" name="subCode" type="xs:string"/>
      <xs:element name="message" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/khaled/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/description/trunk/schemas/core_components/clinicalprocess_healthcond_description_enum_2.1.xsd</con:url><con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at
 
 http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<xs:schema targetNamespace="urn:riv:clinicalprocess:healthcond:description:enums:2" elementFormDefault="qualified" attributeFormDefault="unqualified" version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn:riv:clinicalprocess:healthcond:description:enums:2">
  <xs:simpleType name="ClinicalDocumentNoteCodeEnum">
    <xs:annotation>
      <xs:documentation>Kod för typ av anteckning.
                Tillåtna värden från kodverk Anteckningstyp (1.2.752.129.2.2.2.11):</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="utr">
        <xs:annotation>
          <xs:documentation>Utredning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="atb">
        <xs:annotation>
          <xs:documentation>Åtgärd/Behandling</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="sam">
        <xs:annotation>
          <xs:documentation>Sammanfattning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="sao">
        <xs:annotation>
          <xs:documentation>Samordning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ins">
        <xs:annotation>
          <xs:documentation>Inskrivning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="slu">
        <xs:annotation>
          <xs:documentation>Slutanteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="auf">
        <xs:annotation>
          <xs:documentation>Anteckning utan fysiskt möte</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="sva">
        <xs:annotation>
          <xs:documentation>Slutenvårdsanteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="bes">
        <xs:annotation>
          <xs:documentation>Besöksanteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="MediaTypeEnum">
    <xs:union memberTypes="tns:ApplicationMediaEnum tns:AudioMediaTypeEnum tns:ImageMediaTypeEnum tns:ModelMediaTypeEnum tns:MultipartMediaTypeEnum tns:TextMediaTypeEnum tns:VideoMediaTypeEnum"/>
  </xs:simpleType>
  <xs:simpleType name="ApplicationMediaEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="application/dicom"/>
      <xs:enumeration value="application/msword"/>
      <xs:enumeration value="application/pdf"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="AudioMediaTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="audio/basic"/>
      <xs:enumeration value="audio/k32adpcm"/>
      <xs:enumeration value="audio/mpeg"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ImageMediaTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="image/g3fax"/>
      <xs:enumeration value="image/gif"/>
      <xs:enumeration value="image/jpeg"/>
      <xs:enumeration value="image/png"/>
      <xs:enumeration value="image/tiff"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ModelMediaTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="model/vrml"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="MultipartMediaTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="multipart/x-hl7-cda-level1"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="TextMediaTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="text/html"/>
      <xs:enumeration value="text/plain"/>
      <xs:enumeration value="text/rtf"/>
      <xs:enumeration value="text/sgml"/>
      <xs:enumeration value="text/x-hl7-ft"/>
      <xs:enumeration value="text/xml"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="VideoMediaTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="video/mpeg"/>
      <xs:enumeration value="video/x-avi"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ClinicalDocumentTypeCodeEnum">
    <xs:annotation>
      <xs:documentation>Kod för typ av anteckning.
                Tillåtna värden från kodverk (?.?.?.?.?.?):</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="epi">
        <xs:annotation>
          <xs:documentation>Epikris</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="int">
        <xs:annotation>
          <xs:documentation>Intagninganteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="dag">
        <xs:annotation>
          <xs:documentation>Daganteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ova">
        <xs:annotation>
          <xs:documentation>Öppenvårdsanteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ovs">
        <xs:annotation>
          <xs:documentation>Öppenvårdssammanfattning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ovr">
        <xs:annotation>
          <xs:documentation>Övrigt dokument</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="AssessmentCategoryEnum">
    <xs:annotation>
      <xs:documentation>Bedömningskategori.
                Beskriver vilken kategori av bedömning som är gjord. Tillåtna värden är "pad-pad" (för PADL-bedömning) och "fun-fun" (för funktionsnedsättningsbedömningar).</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="pad-pad">
        <xs:annotation>
          <xs:documentation>PADL-bedömning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="fun-fun">
        <xs:annotation>
          <xs:documentation>funktionsnedsättningsbedömningar</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DiagnosisTypeEnum">
    <xs:annotation>
      <xs:documentation>Anges som "Huvuddiagnos", "Bidiagnos".</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="Huvuddiagnos">
        <xs:annotation>
          <xs:documentation>Huvuddiagnos</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Bidiagnos">
        <xs:annotation>
          <xs:documentation>Bidiagnos</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ResultCodeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="OK"/>
      <xs:enumeration value="ERROR"/>
      <xs:enumeration value="INFO"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ErrorCodeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="INVALID_REQUEST"/>
      <xs:enumeration value="TRANSFORMATION_ERROR"/>
      <xs:enumeration value="APPLICATION_ERROR"/>
      <xs:enumeration value="TECHNICAL_ERROR"/>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/khaled/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/description/trunk/schemas/core_components/itintegration_registry_1.0.xsd</con:url><con:content><![CDATA[<xs:schema targetNamespace="urn:riv:itintegration:registry:1" elementFormDefault="qualified" version="1.0" xmlns="urn:riv:itintegration:registry:1" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:annotation>
    <xs:documentation>Beskrivning: 	Grundläggande informationsobjekt för domänen itintegration:registry (adressering av tjänster)
			
			Revisionshistorik: 2011-06-27 Mats Ekhammar, Callista Enterprise AB
				Added ServiceContractType
			
			Datum:			2011-05-04
			Beskrivning:	Initial version
			Författare:		marcus.krantz@callistaenterprise.se</xs:documentation>
  </xs:annotation>
  <xs:element name="LogicalAddress" type="LogicalAddressType"/>
  <xs:element name="ServiceContract" type="ServiceContractType"/>
  <xs:simpleType name="LogicalAddressType">
    <xs:annotation>
      <xs:documentation>Defines the type for logical address according to national reference architecture.
				Superseeds wsa:To as type for logical address header in RIVTA 2.1.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:complexType name="ServiceContractType">
    <xs:annotation>
      <xs:documentation>Type which describes a service contract. Used in interaction GetSupportedServiceContracts.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="ServiceContractNamespace" type="xs:anyURI"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${webServiceUrl}</con:endpoint><con:endpoint>http://tempuri.org</con:endpoint></con:endpoints><con:operation isOneWay="false" action="urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2:GetDiagnosis" name="GetDiagnosis" bindingOperationName="GetDiagnosis" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>?</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetDiagnosis>
         <!--Zero or more repetitions:-->
         <urn1:careUnitHSAId>?</urn1:careUnitHSAId>
         <urn1:patientId>
            <urn2:id>?</urn2:id>
            <urn2:type>?</urn2:type>
            <!--You may enter ANY elements at this point-->
         </urn1:patientId>
         <!--Optional:-->
         <urn1:timePeriod>
            <urn2:start>?</urn2:start>
            <urn2:end>?</urn2:end>
            <!--You may enter ANY elements at this point-->
         </urn1:timePeriod>
         <!--Optional:-->
         <urn1:sourceSystemHSAId>?</urn1:sourceSystemHSAId>
         <!--Zero or more repetitions:-->
         <urn1:careContactId>?</urn1:careContactId>
         <!--You may enter ANY elements at this point-->
      </urn1:GetDiagnosis>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2:GetDiagnosis"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:testSuite name="TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="BasicTestcase" searchProperties="true" id="9e9012d3-b3bf-490b-9892-9991ecdc9766" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Read data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("BasicTestcase")</script></con:config></con:testStep><con:testStep type="request" name="Call GetDiagnosis"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetDiagnosisResponderBinding</con:interface><con:operation>GetDiagnosis</con:operation><con:request name="Call GetDiagnosis"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="BasicResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetDiagnosis>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetDiagnosis>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="GroovyScriptAssertion" name="Assert Schematron"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
	new File(utils.projectPath + constraintsPath + "constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert PatientId"><con:configuration><scriptText>import static com.eviware.soapui.support.StringUtils.hasContent
import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2'
holder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:description:2'

def diagnosis = holder.getDomNodes('/soapenv:Envelope/soapenv:Body/urn:GetDiagnosisResponse/urn:diagnosis')

assert diagnosis.size() > 0

diagnosis.each {l ->
    def diagnosisHolder = new XmlHolder( l )
    holder.namespaces.each {key, value -> diagnosisHolder.namespaces[key] = value}

    def patientId = diagnosisHolder.getNodeValue('/urn:diagnosis/urn1:diagnosisHeader/urn1:patientId/urn1:id')
    def patientIdType = diagnosisHolder.getNodeValue('/urn:diagnosis/urn1:diagnosisHeader/urn1:patientId/urn1:type')

    assert patientId == context.patientId
    assert patientIdType == context.patientIdType
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert SchematronNPO"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def validator = new SchematronValidator()

if(context.validateNPO != "true") {
	log.info("Not validating NPO-rules, validateNPO is false")
	return
}

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
	new File(utils.projectPath + constraintsPath + "constraintsNPO.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DateBoundaries" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="48c5682e-726b-4671-b9be-ea3583587e63"><con:settings/><con:testStep type="groovy" name="Read data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("DateBoundaries")</script></con:config></con:testStep><con:testStep type="request" name="Call GetDiagnosis"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetDiagnosisResponderBinding</con:interface><con:operation>GetDiagnosis</con:operation><con:request name="Call GetDiagnosis"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="DateResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetDiagnosis>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:timePeriod>
            <urn2:start>${timePeriodStart}</urn2:start>
            <urn2:end>${timePeriodEnd}</urn2:end>
         </urn1:timePeriod>
      </urn1:GetDiagnosis>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="GroovyScriptAssertion" name="Assert Schematron"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
	new File(utils.projectPath + constraintsPath + "constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert Date boundaries"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2'
holder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:description:2'

def diagnoses = holder.getDomNodes('/soapenv:Envelope/soapenv:Body/urn:GetDiagnosisResponse/urn:diagnosis')
def offending = []

assert diagnoses.size() > 0

diagnoses.each { doc ->
    def diagnosisHolder = new XmlHolder( doc )
    holder.namespaces.each {key, value -> diagnosisHolder.namespaces[key] = value}

    def documentId = diagnosisHolder.getNodeValue('/urn:diagnosis/urn1:diagnosisHeader/urn1:documentId')
    def authorTime = diagnosisHolder.getNodeValue('/urn:diagnosis/urn1:diagnosisHeader/urn1:accountableHealthcareProfessional/urn1:authorTime')
    authorTime = authorTime.substring(0, 8)
    def signatureTime = diagnosisHolder.getNodeValue('/urn:diagnosis/urn1:diagnosisHeader/urn1:legalAuthenticator/urn1:signatureTime')
    signatureTime = signatureTime == null ? null : signatureTime.substring(0, 8)
    def diagnosisTime = diagnosisHolder.getNodeValue('urn:diagnosis/urn1:diagnosisBody/urn1:diagnosisTime')
    diagnosisTime = diagnosisTime == null ? null : diagnosisTime.substring(0, 8)

    if ((context.timePeriodStart > authorTime || authorTime > context.timePeriodEnd) &amp;&amp;
            (signatureTime == null || context.timePeriodStart > signatureTime || signatureTime > context.timePeriodEnd) &amp;&amp;
            (diagnosisTime == null || context.timePeriodStart > diagnosisTime || diagnosisTime > context.timePeriodEnd)) {
        offending.add(documentId)
    }
}

if(!offending.isEmpty()) {
    log.error("DocumentIds $offending do not contain dates within the specified interval")
    assert(false)
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert DocumentIds"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2'
holder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:description:2'

def documentIds = holder.getNodeValues('/soapenv:Envelope/soapenv:Body/urn:GetDiagnosisResponse/urn:diagnosis/urn1:diagnosisHeader/urn1:documentId') as List

def expectedDocumentIds = context.expectedDocumentIds ? context.expectedDocumentIds.tokenize(',') : []
def unexpectedDocumentIds = context.unexpectedDocumentIds ? context.unexpectedDocumentIds.tokenize(',') : []

log.debug("Assert documentIds, unexpectedDocumentIds:$unexpectedDocumentIds,\nexpectedDocumentIds, $expectedDocumentIds,\nfound documentIds $documentIds")

def missingExpectedIds = []
def extraUnexpectedIds= []

documentIds.each {id ->
    if (unexpectedDocumentIds.contains(id)) {
        extraUnexpectedIds.add(id)
    }
}

expectedDocumentIds.each {id ->
    if (!documentIds.contains(id)) {
        missingExpectedIds.add(id)
    }
}

if(!missingExpectedIds.isEmpty() || !extraUnexpectedIds.isEmpty()) {
    log.error("Response contains unexpected DocumentIds: $extraUnexpectedIds and/or does not contain  expected DocumentIds: $missingExpectedIds")
    assert(false)
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert SchematronNPO"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def validator = new SchematronValidator()

if(context.validateNPO != "true") {
	log.info("Not validating NPO-rules, validateNPO is false")
	return
}

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
	new File(utils.projectPath + constraintsPath + "constraintsNPO.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CareUnitIdFilter" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="0a4cfffb-b834-4afc-93fb-0a7a03a18827"><con:settings/><con:testStep type="groovy" name="Read data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("CareUnitIdFilter")</script></con:config></con:testStep><con:testStep type="request" name="Call GetDiagnosis"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetDiagnosisResponderBinding</con:interface><con:operation>GetDiagnosis</con:operation><con:request name="Call GetDiagnosis"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="CareUnitResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetDiagnosis>
         <urn1:careUnitHSAId>${careUnitId1}</urn1:careUnitHSAId>
         <urn1:careUnitHSAId>${careUnitId2}</urn1:careUnitHSAId>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetDiagnosis>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="GroovyScriptAssertion" name="Assert Schematron"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
	new File(utils.projectPath + constraintsPath + "constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert PatientId"><con:configuration><scriptText>import static com.eviware.soapui.support.StringUtils.hasContent
import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2'
holder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:description:2'

def diagnosis = holder.getDomNodes('/soapenv:Envelope/soapenv:Body/urn:GetDiagnosisResponse/urn:diagnosis')

assert diagnosis.size() > 0

diagnosis.each {l ->
    def diagnosisHolder = new XmlHolder( l )
    holder.namespaces.each {key, value -> diagnosisHolder.namespaces[key] = value}

    def patientId = diagnosisHolder.getNodeValue('/urn:diagnosis/urn1:diagnosisHeader/urn1:patientId/urn1:id')
    def patientIdType = diagnosisHolder.getNodeValue('/urn:diagnosis/urn1:diagnosisHeader/urn1:patientId/urn1:type')

    assert patientId == context.patientId
    assert patientIdType == context.patientIdType
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert CareUnitId"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2'
holder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:description:2'

def diagnoses = holder.getDomNodes('/soapenv:Envelope/soapenv:Body/urn:GetDiagnosisResponse/urn:diagnosis')

if (diagnoses.length == 0) {
    log.error("Your testdata is incorrect, response contains no diagnoses.")
    assert(false)
}

def offending = []

diagnoses.each { diagnosis ->
    def diagnosisHolder = new XmlHolder( diagnosis )
    holder.namespaces.each {key, value -> diagnosisHolder.namespaces[key] = value}


    def documentId = diagnosisHolder.getNodeValue('/urn:diagnosis/urn1:diagnosisHeader/urn1:documentId')
    def careUnitHSAId = diagnosisHolder.getNodeValue('/urn:diagnosis/urn1:diagnosisHeader/urn1:accountableHealthcareProfessional/urn1:healthcareProfessionalCareUnitHSAId')

    if (careUnitHSAId != context.careUnitId1 &amp;&amp; careUnitHSAId != context.careUnitId2) {
        offending.add("&lt;documentId: ${documentId} careUnitHSAId: ${careUnitHSAId}>")
    }
}

if(!offending.isEmpty()) {
    log.error("Response contains diagnoses with unexpected CareUnitHSAId: ${offending}")
    assert(false)
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert SchematronNPO"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def validator = new SchematronValidator()

if(context.validateNPO != "true") {
	log.info("Not validating NPO-rules, validateNPO is false")
	return
}

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
	new File(utils.projectPath + constraintsPath + "constraintsNPO.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CareContactIdFilter" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="55a2a7ee-e5f6-4b71-a818-10fa1244c721"><con:settings/><con:testStep type="groovy" name="Read data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("CareContactIdFilter")</script></con:config></con:testStep><con:testStep type="request" name="CallWithCareContactId"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetDiagnosisResponderBinding</con:interface><con:operation>GetDiagnosis</con:operation><con:request name="CallWithCareContactId"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="CareContactResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetDiagnosis>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
         <urn1:careContactId>${careContactId2}</urn1:careContactId>
         <urn1:careContactId>${careContactId1}</urn1:careContactId>
      </urn1:GetDiagnosis>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="GroovyScriptAssertion" name="Assert Schematron"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
	new File(utils.projectPath + constraintsPath + "constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AssertCareContact"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def responseHolder = new XmlHolder( messageExchange.response.responseContent )
responseHolder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
responseHolder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2'
responseHolder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:description:2'

def requestHolder =  new XmlHolder( messageExchange.request.requestContent )
requestHolder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
requestHolder.namespaces['urn'] = 'urn:riv:itintegration:registry:1'
requestHolder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2'
requestHolder.namespaces['urn2'] = 'urn:riv:clinicalprocess:healthcond:description:2'

// This is so stupid, I get ${sourceSystemHSAId}, not the actual value
def requestSourceSystemHSAId = requestHolder.getNodeValue('/soapenv:Envelope/soapenv:Body/urn1:GetDiagnosis/urn1:sourceSystemHSAId')
def requestCareContactId = requestHolder.getNodeValue('/soapenv:Envelope/soapenv:Body/urn1:GetDiagnosis/urn1:careContactId[1]')
log.debug("requestSourceSystemHSAId: $requestSourceSystemHSAId")
log.debug("requestCareContactId: $requestCareContactId")

def diagnoses = responseHolder.getDomNodes('/soapenv:Envelope/soapenv:Body/urn:GetDiagnosisResponse/urn:diagnosis')

assert diagnoses.size() != 0

diagnoses.each {l ->
    def diagnosisHolder = new XmlHolder( l )
    responseHolder.namespaces.each {key, value -> diagnosisHolder.namespaces[key] = value}

    def sourceSystemHSAId = diagnosisHolder.getNodeValue('/urn:diagnosis/urn1:diagnosisHeader/urn1:sourceSystemHSAId')
    def careContactId = diagnosisHolder.getNodeValue('/urn:diagnosis/urn1:diagnosisHeader/urn1:careContactId')

    assert sourceSystemHSAId == context.sourceSystemHSAId
    if(requestCareContactId != null) {
        log.debug("asserting CareContactId")
        assert careContactId == context.careContactId1 || careContactId == context.careContactId2
    }
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert SchematronNPO"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def validator = new SchematronValidator()

if(context.validateNPO != "true") {
	log.info("Not validating NPO-rules, validateNPO is false")
	return
}

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
	new File(utils.projectPath + constraintsPath + "constraintsNPO.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="CallWithoutCareContactId"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetDiagnosisResponderBinding</con:interface><con:operation>GetDiagnosis</con:operation><con:request name="CallWithoutCareContactId"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="CareContactResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetDiagnosis>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
      </urn1:GetDiagnosis>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="GroovyScriptAssertion" name="Assert Schematron"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
	new File(utils.projectPath + constraintsPath + "constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AssertCareContact"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def responseHolder = new XmlHolder( messageExchange.response.responseContent )
responseHolder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
responseHolder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2'
responseHolder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:description:2'

def requestHolder =  new XmlHolder( messageExchange.request.requestContent )
requestHolder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
requestHolder.namespaces['urn'] = 'urn:riv:itintegration:registry:1'
requestHolder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2'
requestHolder.namespaces['urn2'] = 'urn:riv:clinicalprocess:healthcond:description:2'

// This is so stupid, I get ${sourceSystemHSAId}, not the actual value
def requestSourceSystemHSAId = requestHolder.getNodeValue('/soapenv:Envelope/soapenv:Body/urn1:GetDiagnosis/urn1:sourceSystemHSAId')
def requestCareContactId = requestHolder.getNodeValue('/soapenv:Envelope/soapenv:Body/urn1:GetDiagnosis/urn1:careContactId[1]')
log.debug("requestSourceSystemHSAId: $requestSourceSystemHSAId")
log.debug("requestCareContactId: $requestCareContactId")

def diagnoses = responseHolder.getDomNodes('/soapenv:Envelope/soapenv:Body/urn:GetDiagnosisResponse/urn:diagnosis')

assert diagnoses.size() != 0

diagnoses.each {l ->
    def diagnosisHolder = new XmlHolder( l )
    responseHolder.namespaces.each {key, value -> diagnosisHolder.namespaces[key] = value}

    def sourceSystemHSAId = diagnosisHolder.getNodeValue('/urn:diagnosis/urn1:diagnosisHeader/urn1:sourceSystemHSAId')
    def careContactId = diagnosisHolder.getNodeValue('/urn:diagnosis/urn1:diagnosisHeader/urn1:careContactId')

    assert sourceSystemHSAId == context.sourceSystemHSAId
    if(requestCareContactId != null) {
        log.debug("asserting CareContactId")
        assert careContactId == context.careContactId1 || careContactId == context.careContactId2
    }
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert SchematronNPO"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def validator = new SchematronValidator()

if(context.validateNPO != "true") {
	log.info("Not validating NPO-rules, validateNPO is false")
	return
}

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
	new File(utils.projectPath + constraintsPath + "constraintsNPO.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="HTTPHeaderFilter" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="83f7146f-1f63-486d-bf9e-5d00ea19909a"><con:settings/><con:testStep type="groovy" name="Read data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("HttpHeaderFilter")</script></con:config></con:testStep><con:testStep type="request" name="Call GetDiagnosis"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetDiagnosisResponderBinding</con:interface><con:operation>GetDiagnosis</con:operation><con:request name="Call GetDiagnosis"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="HTTPHeaderResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetDiagnosis>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
         <urn1:careContactId>§{careContactId2}</urn1:careContactId>
         <urn1:careContactId>${careContactId1}</urn1:careContactId>
      </urn1:GetDiagnosis>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="GroovyScriptAssertion" name="Assert Schematron"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
	new File(utils.projectPath + constraintsPath + "constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AssertHTTPFilter"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2'
holder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:description:2'

def careUnitIds = holder.getNodeValues('/soapenv:Envelope/soapenv:Body/urn:GetDiagnosisResponse/urn:diagnosis/urn1:diagnosisHeader//urn1:accountableHealthcareProfessional/urn1:healthcareProfessionalCareUnitHSAId') as List

def expectedCareUnitIds = context.expectedCareUnitIds? context.expectedCareUnitIds.tokenize(',') : []
def unexpectedCareUnitIds = context.unexpectedCareUnitIds ? context.unexpectedCareUnitIds.tokenize(',') : []

log.debug("Assert careUnitIds, unexpectedCareUnitIds:$unexpectedCareUnitIds,expectedCareUnitIds, $expectedCareUnitIds,\nfound careUnitIds $careUnitIds")

if(expectedCareUnitIds.isEmpty()) {
    log.error("Your test data is invalid, expectedCareUnitIds may not be empty")
    assert 0 > 1
}

def missingExpectedIds = []
def extraUnexpectedIds= []

careUnitIds.each {id ->
    if (unexpectedCareUnitIds.contains(id)) {
        extraUnexpectedIds.add(id)
    }
}

expectedCareUnitIds.each {id ->
    if (!careUnitIds.contains(id)) {
        missingExpectedIds.add(id)
    }
}

if(!missingExpectedIds.isEmpty() || !extraUnexpectedIds.isEmpty()) {
    log.error("Response contains unexpected CareUnitIds: $extraUnexpectedIds and/or does not contain  expected CareUnitIds: $missingExpectedIds")
    assert(false)
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert SchematronNPO"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def validator = new SchematronValidator()

if(context.validateNPO != "true") {
	log.info("Not validating NPO-rules, validateNPO is false")
	return
}

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
	new File(utils.projectPath + constraintsPath + "constraintsNPO.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="NonExistentPatientId" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="9e81d889-04fa-4306-bceb-3389c917f7eb"><con:settings/><con:testStep type="groovy" name="Read data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("NonExistentPatientId")</script></con:config></con:testStep><con:testStep type="request" name="Call GetDiagnosis"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetDiagnosisResponderBinding</con:interface><con:operation>GetDiagnosis</con:operation><con:request name="Call GetDiagnosis"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="EmptyResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetDiagnosis>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetDiagnosis>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace urn='urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2';
declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:description:2';
//urn:GetDiagnosisResponse</path><content><![CDATA[<urn:GetDiagnosisResponse xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:2">
  <urn:result>
    <urn1:resultCode>OK</urn1:resultCode>
    <urn1:logId>1</urn1:logId>
  </urn:result>
</urn:GetDiagnosisResponse>]]></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="NonExistentCareContactId" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="9744746c-4a5a-46ef-a79b-9410bbd03f32"><con:settings/><con:testStep type="groovy" name="Read data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("NonExistentCareContactId")</script></con:config></con:testStep><con:testStep type="request" name="Call GetDiagnosis"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetDiagnosisResponderBinding</con:interface><con:operation>GetDiagnosis</con:operation><con:request name="Call GetDiagnosis"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="EmptyResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetDiagnosis>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
         <urn1:careContactId>${careContactId}</urn1:careContactId>
      </urn1:GetDiagnosis>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace urn='urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2';
declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:description:2';
//urn:GetDiagnosisResponse</path><content><![CDATA[<urn:GetDiagnosisResponse xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:2">
  <urn:result>
    <urn1:resultCode>OK</urn1:resultCode>
    <urn1:logId>1</urn1:logId>
  </urn:result>
</urn:GetDiagnosisResponse>]]></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="Fault tests"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CareContactWithoutSourceSystemHSAId" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d631abf2-3b5d-49d4-a2c6-61cdb417dde6"><con:settings/><con:testStep type="groovy" name="Read data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("CareContactIdWithoutSourceSystemHSAId")</script></con:config></con:testStep><con:testStep type="request" name="CareContactWithoutSourceSystem"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetDiagnosisResponderBinding</con:interface><con:operation>GetDiagnosis</con:operation><con:request name="CareContactWithoutSourceSystem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="SoapFault"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetDiagnosis>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:careContactId>${careContactId}</urn1:careContactId>
      </urn1:GetDiagnosis>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="Not SOAP Fault Assertion" name="SOAP Fault"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="CareContactEmptySourceSystem"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetDiagnosisResponderBinding</con:interface><con:operation>GetDiagnosis</con:operation><con:request name="CareContactEmptySourceSystem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="SoapFault"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetDiagnosis>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:sourceSystemHSAId></urn1:sourceSystemHSAId>
         <urn1:careContactId>${careContactId}</urn1:careContactId>
      </urn1:GetDiagnosis>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="Not SOAP Fault Assertion" name="SOAP Fault"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SourceSystemAndLogicalAddress" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="70794bcf-8bd7-46ce-9656-8d64e1b18d56"><con:settings/><con:testStep type="groovy" name="Read data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("SourceSystemHSAIdAndLogicalAddress")</script></con:config></con:testStep><con:testStep type="request" name="Call GetDiagnosis"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetDiagnosisResponderBinding</con:interface><con:operation>GetDiagnosis</con:operation><con:request name="Call GetDiagnosis"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="SoapFault"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetDiagnosisResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetDiagnosis>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
      </urn1:GetDiagnosis>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="Not SOAP Fault Assertion" name="SOAP Fault"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:requirements/><con:properties><con:property><con:name>constraintsPath</con:name><con:value>/</con:value></con:property></con:properties><con:wssContainer/><con:databaseConnectionContainer/><con:oAuth2ProfileContainer/><con:reporting><con:xmlTemplates/><con:parameters/></con:reporting><con:sensitiveInformation/></con:soapui-project>