<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="GetCarePlans" resourceRoot="" soapui-version="5.0.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="GetCarePlansResponderBinding" type="wsdl" bindingName="{urn:riv:clinicalprocess:logistics:logistics:GetCarePlans:2:rivtabp21}GetCarePlansResponderBinding" soapVersion="1_1" anonymous="optional" definition="file:/Users/khaled/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/logistics/logistics/trunk/schemas/interactions/GetCarePlansInteraction/GetCarePlansInteraction_2.0_RIVTABP21.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/Users/khaled/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/logistics/logistics/trunk/schemas/interactions/GetCarePlansInteraction/GetCarePlansInteraction_2.0_RIVTABP21.wsdl"><con:part><con:url>file:/Users/khaled/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/logistics/logistics/trunk/schemas/interactions/GetCarePlansInteraction/GetCarePlansInteraction_2.0_RIVTABP21.wsdl</con:url><con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<wsdl:definitions name="GetCarePlansInteraction" targetNamespace="urn:riv:clinicalprocess:logistics:logistics:GetCarePlans:2:rivtabp21" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tjsr="urn:riv:clinicalprocess:logistics:logistics:GetCarePlansResponder:2" xmlns:tjsi="urn:riv:clinicalprocess:logistics:logistics:GetCarePlansInitiator:2" xmlns:tns="urn:riv:clinicalprocess:logistics:logistics:GetCarePlans:2:rivtabp21" xmlns:itr="urn:riv:itintegration:registry:1">
  <xs:annotation>
    <xs:documentation>Tjänsteinteraktionens namn: GetCarePlansInteraction
			 Beskrivning: 
			   Care plans for a subject of care
			 Revisioner: 
			 Tjänstedomän: clinicalprocess:logistics
			 Tjänsteinteraktionstyp: Fråga-Svar
			 WS-profil: RIVTABP21
			 Förvaltas av: Sveriges Kommuner och Landsting</xs:documentation>
  </xs:annotation>
  <wsdl:types>
    <xs:schema targetNamespace="urn:riv:clinicalprocess:logistics:logistics:GetCarePlans:2:rivtabp21">
      <xs:import schemaLocation="GetCarePlansResponder_2.0.xsd" namespace="urn:riv:clinicalprocess:logistics:logistics:GetCarePlansResponder:2"/>
      <xs:import schemaLocation="../../core_components/itintegration_registry_1.0.xsd" namespace="urn:riv:itintegration:registry:1"/>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="GetCarePlansRequest">
    <wsdl:part name="LogicalAddress" element="itr:LogicalAddress">
      <wsdl:documentation>National: The HSA-id of Inera AB ("national" aggregation service)</wsdl:documentation>
    </wsdl:part>
    <wsdl:part name="parameters" element="tjsr:GetCarePlans"/>
  </wsdl:message>
  <wsdl:message name="GetCarePlansResponse">
    <wsdl:part name="parameters" element="tjsr:GetCarePlansResponse"/>
  </wsdl:message>
  <wsdl:portType name="GetCarePlansResponderInterface">
    <wsdl:operation name="GetCarePlans">
      <wsdl:input message="tns:GetCarePlansRequest"/>
      <wsdl:output message="tns:GetCarePlansResponse"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="GetCarePlansResponderBinding" type="tns:GetCarePlansResponderInterface">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="GetCarePlans">
      <soap:operation soapAction="urn:riv:clinicalprocess:logistics:GetCarePlansResponder:2:GetCarePlans" style="document"/>
      <wsdl:input>
        <soap:header use="literal" message="tns:GetCarePlansRequest" part="LogicalAddress"/>
        <soap:body use="literal" parts="parameters"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="GetCarePlansResponderService">
    <wsdl:port name="GetCarePlansResponderPort" binding="tns:GetCarePlansResponderBinding">
      <soap:address location="http://tempuri.org"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>file:/Users/khaled/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/logistics/logistics/trunk/schemas/interactions/GetCarePlansInteraction/GetCarePlansResponder_2.0.xsd</con:url><con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<xs:schema targetNamespace="urn:riv:clinicalprocess:logistics:logistics:GetCarePlansResponder:2" elementFormDefault="qualified" attributeFormDefault="unqualified" version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn:riv:clinicalprocess:logistics:logistics:GetCarePlansResponder:2" xmlns:core="urn:riv:clinicalprocess:logistics:logistics:3" xmlns:codes="urn:riv:clinicalprocess:logistics:logistics:enums:3">
  <xs:import schemaLocation="../../core_components/clinicalprocess_logistics_logistics_3.0.xsd" namespace="urn:riv:clinicalprocess:logistics:logistics:3"/>
  <xs:import schemaLocation="../../core_components/clinicalprocess_logistics_logistics_enum_3.0.xsd" namespace="urn:riv:clinicalprocess:logistics:logistics:enums:3"/>
  <xs:element name="GetCarePlans" type="tns:GetCarePlansType"/>
  <xs:element name="GetCarePlansResponse" type="tns:GetCarePlansResponseType"/>
  <xs:complexType name="GetCarePlansType">
    <xs:sequence>
      <xs:element name="careUnitHSAId" type="core:HSAIdType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="patientId" type="core:PersonIdType"/>
      <xs:element name="datePeriod" type="core:DatePeriodType" minOccurs="0"/>
      <xs:element name="sourceSystemHSAId" type="core:HSAIdType" minOccurs="0"/>
      <xs:element name="careContactId" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="GetCarePlansResponseType">
    <xs:sequence>
      <xs:element name="carePlan" type="core:CarePlanType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="result" type="core:ResultType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/khaled/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/logistics/logistics/trunk/schemas/core_components/clinicalprocess_logistics_logistics_3.0.xsd</con:url><con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<xs:schema targetNamespace="urn:riv:clinicalprocess:logistics:logistics:3" elementFormDefault="qualified" attributeFormDefault="unqualified" version="3.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn:riv:clinicalprocess:logistics:logistics:3" xmlns:codes="urn:riv:clinicalprocess:logistics:logistics:enums:3">
  <xs:import schemaLocation="./clinicalprocess_logistics_logistics_enum_3.0.xsd" namespace="urn:riv:clinicalprocess:logistics:logistics:enums:3"/>
  <xs:complexType name="CareContactType">
    <xs:sequence>
      <xs:element name="careContactHeader" type="tns:PatientSummaryHeaderType"/>
      <xs:element name="careContactBody" type="tns:CareContactBodyType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CareServiceType">
    <xs:sequence>
      <xs:element name="careServiceHeader" type="tns:PatientSummaryHeaderType"/>
      <xs:element name="careServiceBody" type="tns:CareServiceBodyType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CarePlanType">
    <xs:sequence>
      <xs:element name="carePlanHeader" type="tns:PatientSummaryHeaderType"/>
      <xs:element name="carePlanBody" type="tns:CarePlanBodyType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CareContactBodyType">
    <xs:annotation>
      <xs:documentation>careContactCode:
                    Typ av vård- och omsorgsdokumentation. Nullvärde tillåtetet.
                careContactReason:
                    Text som beskriver orsaken till vård- och omsorgskontakt som 
                    vård- och omsorgstagaren själv eller dess företrädare anger.
                careContactOrgUnit:
                    Den enhet som kontakt utfördes vid
	            careContactTimePeriod:
	                    För besök sätts sluttidpunken till samma tid som anges som starttidpunkt.
						För planerade kontakter sätts ingen sluttidpunkt.
						Pågående vårdtillfälle ska anges på samma sätt som en planerad vårdkontakt, 
						dvs med angivet startdatum, men utan slutdatum.				
                careContactStatus:
                    Status på vårdkontakten enligt kodverk ur NPÖ RIV-spec 2.2.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="careContactCode" type="tns:CVType" minOccurs="0"/>
      <xs:element name="careContactReason" type="xs:string" minOccurs="0"/>
      <xs:element name="careContactOrgUnit" type="tns:OrgUnitType" minOccurs="0"/>
      <xs:element name="careContactTimePeriod" type="tns:TimePeriodType" minOccurs="0"/>
      <xs:element name="careContactStatus" type="tns:CVType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="additionalPatientInformation" type="tns:AdditionalPatientInformationType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CareServiceBodyType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="performerHealthCareUnit" type="tns:IIType" minOccurs="1"/>
      <xs:element name="performerHealthCareProfessional" type="tns:IIType" minOccurs="0"/>
      <xs:element name="typeOfCareService" type="codes:TypeOfCareServiceEnum" minOccurs="1"/>
      <xs:element name="timePeriod" type="tns:TimePeriodType" minOccurs="1"/>
      <xs:element name="input" type="xs:string" minOccurs="1" maxOccurs="1"/>
      <xs:element name="scope" type="xs:string" minOccurs="1"/>
      <xs:element minOccurs="0" name="housing" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CarePlanBodyType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="content" type="tns:MultimediaType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="participatingCareUnitHSAId" type="tns:IIType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element minOccurs="0" name="typeOfCarePlanEnum" type="codes:TypeOfCarePlanEnum"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PatientSummaryHeaderType">
    <xs:annotation>
      <xs:documentation>careContactId: 
                    Vårdkontaktens identitet som är unik inom källsystemet
                sourceSystemHSAId:
                    HSAId för det system som dokumentet är skapat i.
                documentTime: 
                    Tid då vård- eller omsorgskontakten registrerades
                patientId: 
                    Patientens ID (enligt PatientIdType). 
					type sätts till OID för typ av identifierare. 
					För personnummer ska Skatteverkets personnummer (1.2.752.129.2.1.3.1).
					För samordningsnummer ska Skatteverkets samordningsnummer (1.2.752.129.2.1.3.3).
					För reservnummer används lokalt definierade reservnummet, exempelvis SLL reservnummer (1.2.752.97.3.1.3)

                accountableHealthcareProfessional
                    Hälso- och sjukvårdsperson som ansvarar för vårdkontakten.
				accountableHealthcareProfessionalOrgUnit
					Organisationsenhet för vård- och omsorgspersonens uppdrag i samband med vårdkontakten.
                approvedForPatient:
                    Anger om information får delas till patient. Värdet sätts i 
                    sådant fall till true, i annat fall till false.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="documentId" type="xs:string"/>
      <xs:element name="sourceSystemHSAId" type="tns:HSAIdType"/>
      <xs:element name="documentTitle" type="xs:string" minOccurs="0" maxOccurs="1"/>
      <xs:element name="documentTime" type="tns:TimeStampType" maxOccurs="1" minOccurs="0"/>
      <xs:element name="patientId" type="tns:PersonIdType"/>
      <xs:element name="accountableHealthcareProfessional" type="tns:HealthcareProfessionalType" minOccurs="1"/>
      <xs:element name="legalAuthenticator" type="tns:LegalAuthenticatorType" minOccurs="0"/>
      <xs:element name="approvedForPatient" type="xs:boolean"/>
      <xs:element name="nullified" type="xs:boolean" minOccurs="0"/>
      <xs:element name="nullifiedReason" type="xs:string" minOccurs="0"/>
      <xs:element name="careContactId" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="HealthcareProfessionalType">
    <xs:annotation>
      <xs:documentation>Information om hälso- och omsorgspesonal
			
				healthcareProfessionalHSAId: 
					HSA-id för vård- och omsorgspersonal 
				healthcareProfessionalName
					Namn på vård- och omsorgspersonal
				healthcareProfessionalRoleCode: 
					Information om personens befattning. Om möjligt skall KV Befattning (OID 1.2.752.129.2.2.1.4), se 
					http://www.inera.se/Documents/TJANSTER_PROJEKT/Katalogtjanst_HSA/Innehall/hsa_innehall_befattning.pdf  
				healthcareProfessionalOrgUnit: 
					HSA-id för PDL-enhet som vård- och omsorgspersonen är uppdragstagare för
				healthcareProfessionalCareUnitHSAId: 
					HSA-id för vårdgivaren, som är vårdgivare för den enhet som författaren är uppdragstagare för</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="authorTime" type="tns:TimeStampType"/>
      <xs:element minOccurs="0" name="healthcareProfessionalHSAId" type="tns:HSAIdType"/>
      <xs:element name="healthcareProfessionalName" type="xs:string" minOccurs="0"/>
      <xs:element name="healthcareProfessionalRoleCode" type="tns:CVType" minOccurs="0"/>
      <xs:element name="healthcareProfessionalOrgUnit" type="tns:OrgUnitType" minOccurs="0"/>
      <xs:element name="healthcareProfessionalCareUnitHSAId" type="tns:HSAIdType" minOccurs="0"/>
      <xs:element name="healthcareProfessionalCareGiverHSAId" type="tns:HSAIdType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OrgUnitType">
    <xs:annotation>
      <xs:documentation>Information om en organisationsenhet

				careContactOrgUnitHsaId: 
					HSA-id för organisationsenhet
				careContactOrgUnitName
					Namn på organisationsenhet
				careContactOrgUnitTelecom: 
					Telefon till organisationsenhet
				careContactOrgUnitEmail: 
					Epost till enhet
				careContactOrgUnitAddress: 
					Postadress till enhet
				careContactOrgUnitLocation: 
					Text som anger namnet på plats eller ort för enhetens eller funktionens fysiska placering</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="orgUnitHSAId" type="tns:HSAIdType" minOccurs="0"/>
      <xs:element name="orgUnitName" type="xs:string" minOccurs="0"/>
      <xs:element name="orgUnitTelecom" type="xs:string" minOccurs="0"/>
      <xs:element name="orgUnitEmail" type="xs:string" minOccurs="0"/>
      <xs:element name="orgUnitAddress" type="xs:string" minOccurs="0"/>
      <xs:element name="orgUnitLocation" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <!--Below: only helper types allowed.
        
        A helper type is a type used in one ore more of the domain schema common types.
        It can also be a type used in two or more service schemas.-->
  <xs:complexType name="DatePeriodType">
    <xs:annotation>
      <xs:documentation>Används för att specificera ett datumintervall
                med hjälp av start- och slutdatum.
                
                start: 
                    Startdatum på formatet ÅÅÅÅMMDD
                end: 
                    Slutdatum på formatet ÅÅÅÅMMDD</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="start" type="tns:DateType"/>
      <xs:element name="end" type="tns:DateType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PartialDateType">
    <xs:annotation>
      <xs:documentation>YYYY, YYYYMM or YYYYMMDD</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="format" type="codes:DateTypeFormatEnum"/>
      <xs:element name="value" type="tns:PartialDateValueType"/>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="PartialDateValueType">
    <xs:annotation>
      <xs:documentation>YYYY, YYYYMM or YYYYMMDD</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="-?([1-9][0-9]{3}|0[0-9]{3})((0[1-9]|1[0-2])((0[1-9]|[12][0-9]|3[01]))?)?"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DateType">
    <xs:annotation>
      <xs:documentation>YYYYMMDD</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="(19|20)\d\d(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])"/>
    </xs:restriction>
  </xs:simpleType>
  <!--@TODO Should we have maxlength 64?-->
  <xs:simpleType name="HSAIdType">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:complexType name="PersonIdType">
    <xs:sequence>
      <xs:element name="id" type="xs:string"/>
      <xs:element name="type" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="TimePeriodType">
    <xs:annotation>
      <xs:documentation>Används för att specificera ett datumintervall
                med hjälp av start- och slutdatum.
                
                start: 
                Startdatum på formatet YYYYMMDDhhmmss
                end: 
                Slutdatum på formatet YYYYMMDDhhmmss</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="start" type="tns:TimeStampType"/>
      <xs:element name="end" type="tns:TimeStampType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="TimeStampType">
    <xs:annotation>
      <xs:documentation>A quantity specifying a point on the axis of natural time.
                A point in time is most often represented as a calendar
                expression.
                
                The time has the format YYYYMMDDhhmmss</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="(19|20)\d\d(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|1[0-9]|2[0123])([0-5])([0-9])([0-5])([0-9])"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="CVType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="xs:string" minOccurs="0"/>
      <xs:element name="codeSystem" type="xs:string" minOccurs="0"/>
      <xs:element name="codeSystemName" type="xs:string" minOccurs="0"/>
      <xs:element name="codeSystemVersion" type="xs:string" minOccurs="0"/>
      <xs:element name="displayName" type="xs:string" minOccurs="0"/>
      <xs:element name="originalText" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AdditionalPatientInformationType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="dateOfBirth" type="tns:PartialDateType" minOccurs="0"/>
      <xs:element name="gender" type="tns:CVType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RelationType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="NIType" type="tns:IIType" minOccurs="1"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ReferredInformationType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="tns:IIType" minOccurs="1"/>
      <xs:element name="time" type="tns:TimeStampType"/>
      <xs:element name="type" type="xs:string" minOccurs="1"/>
      <xs:element name="informationOwner" type="tns:InformationOwnerType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="InformationOwnerType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="tns:IIType" minOccurs="1"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MultimediaType">
    <xs:sequence>
      <xs:element name="id" type="xs:string" minOccurs="0"/>
      <xs:element name="mediaType" type="codes:MediaTypeEnum"/>
      <xs:element name="value" type="xs:base64Binary" minOccurs="0"/>
      <xs:element name="reference" type="xs:anyURI" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="LegalAuthenticatorType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="signatureTime" type="tns:TimeStampType"/>
      <xs:element name="legalAuthenticatorHSAId" type="tns:HSAIdType" minOccurs="0"/>
      <xs:element name="legalAuthenticatorName" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="IIType">
    <xs:sequence>
      <xs:element name="root" type="xs:string"/>
      <xs:element name="extension" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ResultType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="resultCode" type="codes:ResultCodeEnum"/>
      <xs:element name="errorCode" type="codes:ErrorCodeEnum" minOccurs="0"/>
      <xs:element name="logId" type="xs:string"/>
      <xs:element minOccurs="0" name="subCode" type="xs:string"/>
      <xs:element name="message" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/khaled/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/logistics/logistics/trunk/schemas/core_components/clinicalprocess_logistics_logistics_enum_3.0.xsd</con:url><con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at
 
 http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<xs:schema targetNamespace="urn:riv:clinicalprocess:logistics:logistics:enums:3" elementFormDefault="qualified" attributeFormDefault="unqualified" version="3.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn:riv:clinicalprocess:logistics:logistics:enums:3">
  <xs:simpleType name="CareContactCodeEnum">
    <xs:restriction base="xs:int">
      <xs:enumeration value="1">
        <xs:annotation>
          <xs:documentation>Besök</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="2">
        <xs:annotation>
          <xs:documentation>Telefon</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="3">
        <xs:annotation>
          <xs:documentation>Vårdtillfälle</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="4">
        <xs:annotation>
          <xs:documentation>Dagsjukvård</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="5">
        <xs:annotation>
          <xs:documentation>Annan</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="MediaTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="application/dicom"/>
      <xs:enumeration value="application/msword"/>
      <xs:enumeration value="application/pdf"/>
      <xs:enumeration value="audio/basic"/>
      <xs:enumeration value="audio/k32adpcm"/>
      <xs:enumeration value="audio/mpeg"/>
      <xs:enumeration value="image/g3fax"/>
      <xs:enumeration value="image/gif"/>
      <xs:enumeration value="image/jpeg"/>
      <xs:enumeration value="image/png"/>
      <xs:enumeration value="image/tiff"/>
      <xs:enumeration value="model/vrml"/>
      <xs:enumeration value="multipart/x-hl7-cda-level1"/>
      <xs:enumeration value="text/html"/>
      <xs:enumeration value="text/plain"/>
      <xs:enumeration value="text/rtf"/>
      <xs:enumeration value="text/sgml"/>
      <xs:enumeration value="text/x-hl7-ft"/>
      <xs:enumeration value="text/xml"/>
      <xs:enumeration value="video/mpeg"/>
      <xs:enumeration value="video/x-avi"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DateTypeFormatEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="YYYY"/>
      <xs:enumeration value="YYYYMM"/>
      <xs:enumeration value="YYYYMMDD"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ResultCodeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="OK"/>
      <xs:enumeration value="ERROR"/>
      <xs:enumeration value="INFO"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ErrorCodeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="INVALID_REQUEST"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="TypeOfCareServiceEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="HSJV"/>
      <xs:enumeration value="HTJ"/>
      <xs:enumeration value="LSS"/>
      <xs:enumeration value="SVTJ"/>
      <xs:enumeration value="SÄBO"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="TypeOfCarePlanEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="SIP">
        <xs:annotation>
          <xs:documentation>Samordnad individuell plan</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="SPLPTLRV">
        <xs:annotation>
          <xs:documentation>Samordnad plan enligt LPT och LRV</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="SPU">
        <xs:annotation>
          <xs:documentation>Samordnad plan vid utskrivning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="VP">
        <xs:annotation>
          <xs:documentation>Vårdplan</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="HP">
        <xs:annotation>
          <xs:documentation>Habiliteringsplan</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="RP">
        <xs:annotation>
          <xs:documentation>Rehabiliteringsplan</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="GP">
        <xs:annotation>
          <xs:documentation>Genomförande plan</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="SVP">
        <xs:annotation>
          <xs:documentation>Standardiserad vårdplan</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/khaled/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/logistics/logistics/trunk/schemas/core_components/itintegration_registry_1.0.xsd</con:url><con:content><![CDATA[<xs:schema targetNamespace="urn:riv:itintegration:registry:1" elementFormDefault="qualified" version="1.0" xmlns="urn:riv:itintegration:registry:1" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:annotation>
    <xs:documentation>Beskrivning: 	Grundläggande informationsobjekt för domänen itintegration:registry (adressering av tjänster)
			
			Revisionshistorik: 2011-06-27 Mats Ekhammar, Callista Enterprise AB
				Added ServiceContractType
			
			Datum:			2011-05-04
			Beskrivning:	Initial version
			Författare:		marcus.krantz@callistaenterprise.se</xs:documentation>
  </xs:annotation>
  <xs:element name="LogicalAddress" type="LogicalAddressType"/>
  <xs:element name="ServiceContract" type="ServiceContractType"/>
  <xs:simpleType name="LogicalAddressType">
    <xs:annotation>
      <xs:documentation>Defines the type for logical address according to national reference architecture.
				Superseeds wsa:To as type for logical address header in RIVTA 2.1.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:complexType name="ServiceContractType">
    <xs:annotation>
      <xs:documentation>Type which describes a service contract. Used in interaction GetSupportedServiceContracts.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="ServiceContractNamespace" type="xs:anyURI"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://tempuri.org</con:endpoint></con:endpoints><con:operation isOneWay="false" action="urn:riv:clinicalprocess:logistics:GetCarePlansResponder:2:GetCarePlans" name="GetCarePlans" bindingOperationName="GetCarePlans" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://tempuri.org</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:logistics:logistics:GetCarePlansResponder:2" xmlns:urn2="urn:riv:clinicalprocess:logistics:logistics:3">
   <soapenv:Header>
      <urn:LogicalAddress>?</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCarePlans>
         <!--Zero or more repetitions:-->
         <urn1:careUnitHSAId>?</urn1:careUnitHSAId>
         <urn1:patientId>
            <urn2:id>?</urn2:id>
            <urn2:type>?</urn2:type>
            <!--You may enter ANY elements at this point-->
         </urn1:patientId>
         <!--Optional:-->
         <urn1:datePeriod>
            <urn2:start>?</urn2:start>
            <urn2:end>?</urn2:end>
            <!--You may enter ANY elements at this point-->
         </urn1:datePeriod>
         <!--Optional:-->
         <urn1:sourceSystemHSAId>?</urn1:sourceSystemHSAId>
         <!--Zero or more repetitions:-->
         <urn1:careContactId>?</urn1:careContactId>
         <!--You may enter ANY elements at this point-->
      </urn1:GetCarePlans>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:riv:clinicalprocess:logistics:GetCarePlansResponder:2:GetCarePlans"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:testSuite name="TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CareUnitHSAId Filter" searchProperties="true" id="9278feb2-4fbe-4b97-bcca-4f8d458db0cb"><con:settings/><con:testStep type="groovy" name="GIVEN CareUnitHSAId Filter data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("CareUnitHSAId Filter")</script></con:config></con:testStep><con:testStep type="request" name="WHEN calling GetCarePlans"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetCarePlansResponderBinding</con:interface><con:operation>GetCarePlans</con:operation><con:request name="WHEN calling GetCarePlans"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="CareUnitHSAIdResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:logistics:logistics:GetCarePlansResponder:2" xmlns:urn2="urn:riv:clinicalprocess:logistics:logistics:3">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCarePlans>
         <urn1:careUnitHSAId>${careUnitHSAId}</urn1:careUnitHSAId>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
         <urn1:careContactId>${careContactId}</urn1:careContactId>
      </urn1:GetCarePlans>
      </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration><definition/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="THEN ensure all schematron rules passes"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
    new File(utils.projectPath + File.separator + "constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AND ensure patientId is correct"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper

def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
// Fetch properties from TestSuite Custom properties
holder.namespaces['urn'] = context.expand('${#TestSuite#urn}')
holder.namespaces['urn1'] = context.expand('${#TestSuite#urn1}')

def records = holder.getDomNodes(context.expand('${#TestSuite#headerNode}'))
assert records.length > 0 :"Response contains no records."

// Compare patientId and patientIdType in the response to what we have in data.xml for this test case.
records.each {c ->
    def recordHolder = new XmlHolder( c )
    holder.namespaces.each {key, value -> recordHolder.namespaces[key] = value}
    def documentId = recordHolder.getNodeValue('//urn1:documentId')
    def patientId = recordHolder.getNodeValue('//urn1:patientId/urn1:id')
    def patientIdType = recordHolder.getNodeValue('//urn1:patientId/urn1:type')
    assert (patientId != context.patientId || patientIdType != context.patientIdType) != true : "Response contains a record with other PatientId. PatientId: ${patientId}, Type: ${patientIdType} DocumentId: ${documentId}"
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AND ensure all documentId's are valid"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper

def contextHelper = new ContextHelper(context)
def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
// Fetch properties from TestSuite Custom properties
holder.namespaces['urn'] = context.expand('${#TestSuite#urn}')
holder.namespaces['urn1'] = context.expand('${#TestSuite#urn1}')

def documentIds = holder.getNodeValues(context.expand('${#TestSuite#headerNode}') + '/urn1:documentId') as List
if (documentIds.size == 0 || documentIds == null) {
    contextHelper.fail("Response contains no documentId's.")
    return
}

def expectedDocumentIds = context.expectedDocumentIds ? context.expectedDocumentIds.tokenize(',') : []
def unexpectedDocumentIds = context.unexpectedDocumentIds ? context.unexpectedDocumentIds.tokenize(',') : []

assert expectedDocumentIds.size > 0 : "Test must have at least one expected document id"
assert unexpectedDocumentIds.size > 0 : "Test must have at least one unexpected document id"

documentIds.each {id ->
    if (unexpectedDocumentIds.contains(id)) {
        contextHelper.fail("Response contains a unexpected record. DocumentId: $id")
    }
}
expectedDocumentIds.each {id ->
    if (!documentIds.contains(id)) {
        contextHelper.fail("Response does not contain a expected record. DocumentId: $id")
    }
}</scriptText></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" name="AND ensure valid response time"><con:configuration><SLA>12000</SLA></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure a result.logId exists"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
//urn:GetCarePlansResponse[1]/urn:result[1]/urn1:logId[matches(., '.*')]</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure result.resultCode equals OK"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
//urn:GetCarePlansResponse[1]/urn:result[1]/urn1:resultCode[1]/text()</path><content>OK</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="urn:riv:clinicalprocess:logistics:GetCarePlansResponder:2:GetCarePlans" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Date boundaries" searchProperties="true" id="e51ac4db-e934-4561-bb1a-52ef36130333"><con:settings/><con:testStep type="groovy" name="GIVEN DateBoundaries data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("DateBoundaries")</script></con:config></con:testStep><con:testStep type="request" name="WHEN calling GetCarePlans"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetCarePlansResponderBinding</con:interface><con:operation>GetCarePlans</con:operation><con:request name="WHEN calling GetCarePlans"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="CareUnitHSAIdResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:logistics:logistics:GetCarePlansResponder:2" xmlns:urn2="urn:riv:clinicalprocess:logistics:logistics:3">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCarePlans>
         <urn1:careUnitHSAId>${careUnitHSAId}</urn1:careUnitHSAId>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <!--
         <urn1:datePeriod>
            <urn2:start>${datePeriodStart}</urn2:start>
            <urn2:end>${datePeriodEnd}</urn2:end>
         </urn1:datePeriod>
         -->
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
         <urn1:careContactId>${careContactId}</urn1:careContactId>
      </urn1:GetCarePlans>
      </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration><definition/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="THEN ensure all schematron rules passes"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
    new File(utils.projectPath + File.separator + "constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AND ensure patientId is correct"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper

def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
// Fetch properties from TestSuite Custom properties
holder.namespaces['urn'] = context.expand('${#TestSuite#urn}')
holder.namespaces['urn1'] = context.expand('${#TestSuite#urn1}')

def records = holder.getDomNodes(context.expand('${#TestSuite#headerNode}'))
assert records.length > 0 :"Response contains no records."

// Compare patientId and patientIdType in the response to what we have in data.xml for this test case.
records.each {c ->
    def recordHolder = new XmlHolder( c )
    holder.namespaces.each {key, value -> recordHolder.namespaces[key] = value}
    def documentId = recordHolder.getNodeValue('//urn1:documentId')
    def patientId = recordHolder.getNodeValue('//urn1:patientId/urn1:id')
    def patientIdType = recordHolder.getNodeValue('//urn1:patientId/urn1:type')
    assert (patientId != context.patientId || patientIdType != context.patientIdType) != true : "Response contains a record with other PatientId. PatientId: ${patientId}, Type: ${patientIdType} DocumentId: ${documentId}"
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AND ensure all documentId's are valid"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper

def contextHelper = new ContextHelper(context)
def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
// Fetch properties from TestSuite Custom properties
holder.namespaces['urn'] = context.expand('${#TestSuite#urn}')
holder.namespaces['urn1'] = context.expand('${#TestSuite#urn1}')

def documentIds = holder.getNodeValues(context.expand('${#TestSuite#headerNode}') + '/urn1:documentId') as List
if (documentIds.size == 0 || documentIds == null) {
    contextHelper.fail("Response contains no documentId's.")
    return
}

def expectedDocumentIds = context.expectedDocumentIds ? context.expectedDocumentIds.tokenize(',') : []
def unexpectedDocumentIds = context.unexpectedDocumentIds ? context.unexpectedDocumentIds.tokenize(',') : []

assert expectedDocumentIds.size > 0 : "Test must have at least one expected document id"
assert unexpectedDocumentIds.size > 0 : "Test must have at least one unexpected document id"

documentIds.each {id ->
    if (unexpectedDocumentIds.contains(id)) {
        contextHelper.fail("Response contains a unexpected record. DocumentId: $id")
    }
}
expectedDocumentIds.each {id ->
    if (!documentIds.contains(id)) {
        contextHelper.fail("Response does not contain a expected record. DocumentId: $id")
    }
}</scriptText></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" name="AND ensure valid response time"><con:configuration><SLA>12000</SLA></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure a result.logId exists"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
//urn:GetCarePlansResponse[1]/urn:result[1]/urn1:logId[matches(., '.*')]</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure result.resultCode equals OK"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
//urn:GetCarePlansResponse[1]/urn:result[1]/urn1:resultCode[1]/text()</path><content>OK</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="urn:riv:clinicalprocess:logistics:GetCarePlansResponder:2:GetCarePlans" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Only PatientId" searchProperties="true" id="581f603c-ea39-41c6-9192-8f2b9459c8f0"><con:settings/><con:testStep type="groovy" name="GIVEN Only PatientId data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("Only PatientId")</script></con:config></con:testStep><con:testStep type="request" name="WHEN calling GetCarePlans"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetCarePlansResponderBinding</con:interface><con:operation>GetCarePlans</con:operation><con:request name="WHEN calling GetCarePlans"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="CareUnitHSAIdResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:logistics:logistics:GetCarePlansResponder:2" xmlns:urn2="urn:riv:clinicalprocess:logistics:logistics:3">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCarePlans>
         <urn1:careUnitHSAId>${careUnitHSAId}</urn1:careUnitHSAId>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <!--
         <urn1:datePeriod>
            <urn2:start>${datePeriodStart}</urn2:start>
            <urn2:end>${datePeriodEnd}</urn2:end>
         </urn1:datePeriod>
         -->
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
         <urn1:careContactId>${careContactId}</urn1:careContactId>
      </urn1:GetCarePlans>
      </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration><definition/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="THEN ensure all schematron rules passes"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
    new File(utils.projectPath + File.separator + "constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AND ensure patientId is correct"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper

def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
// Fetch properties from TestSuite Custom properties
holder.namespaces['urn'] = context.expand('${#TestSuite#urn}')
holder.namespaces['urn1'] = context.expand('${#TestSuite#urn1}')

def records = holder.getDomNodes(context.expand('${#TestSuite#headerNode}'))
assert records.length > 0 :"Response contains no records."

// Compare patientId and patientIdType in the response to what we have in data.xml for this test case.
records.each {c ->
    def recordHolder = new XmlHolder( c )
    holder.namespaces.each {key, value -> recordHolder.namespaces[key] = value}
    def documentId = recordHolder.getNodeValue('//urn1:documentId')
    def patientId = recordHolder.getNodeValue('//urn1:patientId/urn1:id')
    def patientIdType = recordHolder.getNodeValue('//urn1:patientId/urn1:type')
    assert (patientId != context.patientId || patientIdType != context.patientIdType) != true : "Response contains a record with other PatientId. PatientId: ${patientId}, Type: ${patientIdType} DocumentId: ${documentId}"
}</scriptText></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" name="AND ensure valid response time"><con:configuration><SLA>12000</SLA></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure a result.logId exists"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
//urn:GetCarePlansResponse[1]/urn:result[1]/urn1:logId[matches(., '.*')]</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure result.resultCode equals OK"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
//urn:GetCarePlansResponse[1]/urn:result[1]/urn1:resultCode[1]/text()</path><content>OK</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="urn:riv:clinicalprocess:logistics:GetCarePlansResponder:2:GetCarePlans" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="NonExisting PatientId" searchProperties="true" id="49779b90-ea40-4d01-8405-e852f7a83361"><con:settings/><con:testStep type="groovy" name="GIVEN NonExisting PatientId data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("NonExisting PatientId")</script></con:config></con:testStep><con:testStep type="request" name="WHEN calling GetCarePlans"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetCarePlansResponderBinding</con:interface><con:operation>GetCarePlans</con:operation><con:request name="WHEN calling GetCarePlans"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="EmptyResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:logistics:logistics:GetCarePlansResponder:2" xmlns:urn2="urn:riv:clinicalprocess:logistics:logistics:3">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCarePlans>
         <urn1:careUnitHSAId>${careUnitHSAId}</urn1:careUnitHSAId>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <!--
         <urn1:datePeriod>
            <urn2:start>${datePeriodStart}</urn2:start>
            <urn2:end>${datePeriodEnd}</urn2:end>
         </urn1:datePeriod>
         -->
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
         <urn1:careContactId>${careContactId}</urn1:careContactId>
      </urn1:GetCarePlans>
      </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration><definition/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="THEN ensure all schematron rules passes"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
    new File(utils.projectPath + File.separator + "constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" name="AND ensure valid response time"><con:configuration><SLA>12000</SLA></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure a result.logId exists"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
//urn:GetCarePlansResponse[1]/urn:result[1]/urn1:logId[matches(., '.*')]</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure result.resultCode equals OK"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
//urn:GetCarePlansResponse[1]/urn:result[1]/urn1:resultCode[1]/text()</path><content>OK</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure zero carePlan"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
count(//urn:GetCarePlansResponse[1]/urn:carePlan)</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="urn:riv:clinicalprocess:logistics:GetCarePlansResponder:2:GetCarePlans" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CareContactId Filter" searchProperties="true" id="5bb0117b-0a2c-4062-ae3f-8ef67583b890"><con:settings/><con:testStep type="groovy" name="GIVEN CareContactId Filter data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("CareContactId Filter")</script></con:config></con:testStep><con:testStep type="request" name="WHEN calling GetCarePlans"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetCarePlansResponderBinding</con:interface><con:operation>GetCarePlans</con:operation><con:request name="WHEN calling GetCarePlans"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="CareUnitHSAIdResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:logistics:logistics:GetCarePlansResponder:2" xmlns:urn2="urn:riv:clinicalprocess:logistics:logistics:3">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCarePlans>
         <urn1:careUnitHSAId>${careUnitHSAId}</urn1:careUnitHSAId>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <!--
         <urn1:datePeriod>
            <urn2:start>${datePeriodStart}</urn2:start>
            <urn2:end>${datePeriodEnd}</urn2:end>
         </urn1:datePeriod>
         -->
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
         <urn1:careContactId>${careContactId}</urn1:careContactId>
      </urn1:GetCarePlans>
      </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration><definition/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="THEN ensure all schematron rules passes"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
    new File(utils.projectPath + File.separator + "constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AND ensure patientId is correct"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper

def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
// Fetch properties from TestSuite Custom properties
holder.namespaces['urn'] = context.expand('${#TestSuite#urn}')
holder.namespaces['urn1'] = context.expand('${#TestSuite#urn1}')

def records = holder.getDomNodes(context.expand('${#TestSuite#headerNode}'))
assert records.length > 0 :"Response contains no records."

// Compare patientId and patientIdType in the response to what we have in data.xml for this test case.
records.each {c ->
    def recordHolder = new XmlHolder( c )
    holder.namespaces.each {key, value -> recordHolder.namespaces[key] = value}
    def documentId = recordHolder.getNodeValue('//urn1:documentId')
    def patientId = recordHolder.getNodeValue('//urn1:patientId/urn1:id')
    def patientIdType = recordHolder.getNodeValue('//urn1:patientId/urn1:type')
    assert (patientId != context.patientId || patientIdType != context.patientIdType) != true : "Response contains a record with other PatientId. PatientId: ${patientId}, Type: ${patientIdType} DocumentId: ${documentId}"
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AND ensure all documentId's are valid"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper

def contextHelper = new ContextHelper(context)
def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
// Fetch properties from TestSuite Custom properties
holder.namespaces['urn'] = context.expand('${#TestSuite#urn}')
holder.namespaces['urn1'] = context.expand('${#TestSuite#urn1}')

def documentIds = holder.getNodeValues(context.expand('${#TestSuite#headerNode}') + '/urn1:documentId') as List
if (documentIds.size == 0 || documentIds == null) {
    contextHelper.fail("Response contains no documentId's.")
    return
}

def expectedDocumentIds = context.expectedDocumentIds ? context.expectedDocumentIds.tokenize(',') : []
def unexpectedDocumentIds = context.unexpectedDocumentIds ? context.unexpectedDocumentIds.tokenize(',') : []

assert expectedDocumentIds.size > 0 : "Test must have at least one expected document id"
assert unexpectedDocumentIds.size > 0 : "Test must have at least one unexpected document id"

documentIds.each {id ->
    if (unexpectedDocumentIds.contains(id)) {
        contextHelper.fail("Response contains a unexpected record. DocumentId: $id")
    }
}
expectedDocumentIds.each {id ->
    if (!documentIds.contains(id)) {
        contextHelper.fail("Response does not contain a expected record. DocumentId: $id")
    }
}</scriptText></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" name="AND ensure valid response time"><con:configuration><SLA>12000</SLA></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure a result.logId exists"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
//urn:GetCarePlansResponse[1]/urn:result[1]/urn1:logId[matches(., '.*')]</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure result.resultCode equals OK"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
//urn:GetCarePlansResponse[1]/urn:result[1]/urn1:resultCode[1]/text()</path><content>OK</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="urn:riv:clinicalprocess:logistics:GetCarePlansResponder:2:GetCarePlans" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="NonExisting CareContactId" searchProperties="true" id="2ab5d192-1fae-444f-8d0f-2214f69c5b98"><con:settings/><con:testStep type="groovy" name="GIVEN NonExisting CareContactId data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("NonExisting CareContactId")</script></con:config></con:testStep><con:testStep type="request" name="WHEN calling GetCarePlans"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetCarePlansResponderBinding</con:interface><con:operation>GetCarePlans</con:operation><con:request name="WHEN calling GetCarePlans"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="EmptyResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:logistics:logistics:GetCarePlansResponder:2" xmlns:urn2="urn:riv:clinicalprocess:logistics:logistics:3">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCarePlans>
         <urn1:careUnitHSAId>${careUnitHSAId}</urn1:careUnitHSAId>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <!--
         <urn1:datePeriod>
            <urn2:start>${datePeriodStart}</urn2:start>
            <urn2:end>${datePeriodEnd}</urn2:end>
         </urn1:datePeriod>
         -->
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
         <urn1:careContactId>${careContactId}</urn1:careContactId>
      </urn1:GetCarePlans>
      </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration><definition/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="THEN ensure all schematron rules passes"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
    new File(utils.projectPath + File.separator + "constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" name="AND ensure valid response time"><con:configuration><SLA>12000</SLA></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure a result.logId exists"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
//urn:GetCarePlansResponse[1]/urn:result[1]/urn1:logId[matches(., '.*')]</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure result.resultCode equals OK"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
//urn:GetCarePlansResponse[1]/urn:result[1]/urn1:resultCode[1]/text()</path><content>OK</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
count(//urn:GetCarePlansResponse[1]/urn:carePlan)</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="urn:riv:clinicalprocess:logistics:GetCarePlansResponder:2:GetCarePlans" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="HTTPHeader Filter" searchProperties="true" id="c12fe1d6-f1c7-499e-8636-51ef52fd6122"><con:settings/><con:testStep type="groovy" name="GIVEN HTTPHeader Filter data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("HTTPHeader Filter")</script></con:config></con:testStep><con:testStep type="request" name="WHEN calling GetCarePlans"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetCarePlansResponderBinding</con:interface><con:operation>GetCarePlans</con:operation><con:request name="WHEN calling GetCarePlans"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="CareUnitHSAIdResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:logistics:logistics:GetCarePlansResponder:2" xmlns:urn2="urn:riv:clinicalprocess:logistics:logistics:3">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCarePlans>
         <urn1:careUnitHSAId>${careUnitHSAId}</urn1:careUnitHSAId>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <!--
         <urn1:datePeriod>
            <urn2:start>${datePeriodStart}</urn2:start>
            <urn2:end>${datePeriodEnd}</urn2:end>
         </urn1:datePeriod>
         -->
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
         <urn1:careContactId>${careContactId}</urn1:careContactId>
      </urn1:GetCarePlans>
      </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration><definition/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="THEN ensure all schematron rules passes"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
    new File(utils.projectPath + File.separator + "constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AND ensure patientId is correct"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper

def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
// Fetch properties from TestSuite Custom properties
holder.namespaces['urn'] = context.expand('${#TestSuite#urn}')
holder.namespaces['urn1'] = context.expand('${#TestSuite#urn1}')

def records = holder.getDomNodes(context.expand('${#TestSuite#headerNode}'))
assert records.length > 0 :"Response contains no records."

// Compare patientId and patientIdType in the response to what we have in data.xml for this test case.
records.each {c ->
    def recordHolder = new XmlHolder( c )
    holder.namespaces.each {key, value -> recordHolder.namespaces[key] = value}
    def documentId = recordHolder.getNodeValue('//urn1:documentId')
    def patientId = recordHolder.getNodeValue('//urn1:patientId/urn1:id')
    def patientIdType = recordHolder.getNodeValue('//urn1:patientId/urn1:type')
    assert (patientId != context.patientId || patientIdType != context.patientIdType) != true : "Response contains a record with other PatientId. PatientId: ${patientId}, Type: ${patientIdType} DocumentId: ${documentId}"
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AND ensure all documentId's are valid"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper

def contextHelper = new ContextHelper(context)
def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
// Fetch properties from TestSuite Custom properties
holder.namespaces['urn'] = context.expand('${#TestSuite#urn}')
holder.namespaces['urn1'] = context.expand('${#TestSuite#urn1}')

def documentIds = holder.getNodeValues(context.expand('${#TestSuite#headerNode}') + '/urn1:documentId') as List
if (documentIds.size == 0 || documentIds == null) {
    contextHelper.fail("Response contains no documentId's.")
    return
}

def expectedDocumentIds = context.expectedDocumentIds ? context.expectedDocumentIds.tokenize(',') : []
def unexpectedDocumentIds = context.unexpectedDocumentIds ? context.unexpectedDocumentIds.tokenize(',') : []

assert expectedDocumentIds.size > 0 : "Test must have at least one expected document id"
assert unexpectedDocumentIds.size > 0 : "Test must have at least one unexpected document id"

documentIds.each {id ->
    if (unexpectedDocumentIds.contains(id)) {
        contextHelper.fail("Response contains a unexpected record. DocumentId: $id")
    }
}
expectedDocumentIds.each {id ->
    if (!documentIds.contains(id)) {
        contextHelper.fail("Response does not contain a expected record. DocumentId: $id")
    }
}</scriptText></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" name="AND ensure valid response time"><con:configuration><SLA>12000</SLA></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure a result.logId exists"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
//urn:GetCarePlansResponse[1]/urn:result[1]/urn1:logId[matches(., '.*')]</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure result.resultCode equals OK"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='${#TestSuite#urn}';
declare namespace urn1='${#TestSuite#urn1}';
//urn:GetCarePlansResponse[1]/urn:result[1]/urn1:resultCode[1]/text()</path><content>OK</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="urn:riv:clinicalprocess:logistics:GetCarePlansResponder:2:GetCarePlans" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>urn</con:name><con:value>urn:riv:clinicalprocess:logistics:logistics:GetCarePlansResponder:2</con:value></con:property><con:property><con:name>urn1</con:name><con:value>urn:riv:clinicalprocess:logistics:logistics:3</con:value></con:property><con:property><con:name>headerNode</con:name><con:value>/soapenv:Envelope/soapenv:Body/urn:GetCarePlansResponse/urn:carePlan/urn1:carePlanHeader</con:value></con:property></con:properties></con:testSuite><con:testSuite name="Fault tests"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verify SourceSystemHSAId and CareContactId" searchProperties="true" id="bf35d0da-1ab4-476e-86f7-7efabd83ec55"><con:settings/><con:testStep type="groovy" name="GIVEN SourceSystemHSAId and CareContactId data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("CareUnitHSAId Filter")</script></con:config></con:testStep><con:testStep type="request" name="WHEN calling GetCarePlans"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetCarePlansResponderBinding</con:interface><con:operation>GetCarePlans</con:operation><con:request name="WHEN calling GetCarePlans"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-mock-response" value="ERROR" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:logistics:logistics:GetCarePlansResponder:2" xmlns:urn2="urn:riv:clinicalprocess:logistics:logistics:3">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCarePlans>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
         <urn1:careContactId>${careContactId}</urn1:careContactId>
      </urn1:GetCarePlans>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="XPath Match" name="AND ensure resultCode equals ERROR"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn1='urn:riv:clinicalprocess:logistics:logistics:3';
declare namespace urn='urn:riv:clinicalprocess:logistics:logistics:GetCarePlansResponder:2';
//urn:GetCarePlansResponse[1]/urn:result[1]/urn1:resultCode/text()</path><content>ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure errroCode equals INVALID_REQUEST"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn1='urn:riv:clinicalprocess:logistics:logistics:3';
declare namespace urn='urn:riv:clinicalprocess:logistics:logistics:GetCarePlansResponder:2';
//urn:GetCarePlansResponse[1]/urn:result[1]/urn1:errorCode/text()</path><content>INVALID_REQUEST</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verify SourceSystemHSAId and LogicalAddress" searchProperties="true" id="0f667edc-2341-4b30-858b-7d27df293f58"><con:settings/><con:testStep type="groovy" name="GIVEN SourceSystemHSAId and LogicalAddress data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("SourceSystemHSAId and CareContactId")</script></con:config></con:testStep><con:testStep type="request" name="WHEN calling GetCarePlans"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetCarePlansResponderBinding</con:interface><con:operation>GetCarePlans</con:operation><con:request name="WHEN calling GetCarePlans"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-mock-response" value="ERROR" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:logistics:logistics:GetCarePlansResponder:2" xmlns:urn2="urn:riv:clinicalprocess:logistics:logistics:3">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCarePlans>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
      </urn1:GetCarePlans>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="XPath Match" name="AND ensure resultCode equals ERROR"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn1='urn:riv:clinicalprocess:logistics:logistics:3';
declare namespace urn='urn:riv:clinicalprocess:logistics:logistics:GetCarePlansResponder:2';
//urn:GetCarePlansResponse[1]/urn:result[1]/urn1:resultCode/text()</path><content>ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="AND ensure errroCode equals INVALID_REQUEST"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn1='urn:riv:clinicalprocess:logistics:logistics:3';
declare namespace urn='urn:riv:clinicalprocess:logistics:logistics:GetCarePlansResponder:2';
//urn:GetCarePlansResponse[1]/urn:result[1]/urn1:errorCode/text()</path><content>INVALID_REQUEST</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>